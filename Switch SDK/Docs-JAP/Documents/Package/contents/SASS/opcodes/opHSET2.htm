<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>

<title>HSET2</title><link rel="StyleSheet" href="../style.css" type="text/css" title="general"></head>

<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    HSET2 : FP16 SIMD Compare and Set<br>
    <!-- SUMMARY_TABLE_INFO { description => "FP16 SIMD Compare and Set" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Floating Point Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "HSET2",     subsection => 3 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">
<pre>SPA 5.3:<br><br><code>        <code>{@{!}Pg}</code>   <code><b>HSET2</b>{.bval}.cmp{.FTZ}</code>       <code>Rd, {-}{|}Ra{|}{.iswz}, {-}{|}Rb{|}{.iswz}</code>                                    <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("REDIRECTABLE_FP16") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("REDIRECTABLE_FP16") --></code>   <code>;</code>                       </code><!-- SUMMARY_TABLE_INFO { define_opcode => "HSET2" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>HSET2</b>{.bval}.cmp{.FTZ}</code>       <code>Rd, {-}{|}Ra{|}{.iswz}, {-}   c[#BankU05][#AddrU16]</code>                           <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("REDIRECTABLE_FP16") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("REDIRECTABLE_FP16") --></code>   <code>;</code>                       </code><!-- SUMMARY_TABLE_INFO { define_opcode => "HSET2" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>HSET2</b>{.bval}.cmp{.FTZ}</code>       <code>Rd, {-}{|}Ra{|}{.iswz},</code></code> {{-}{|}#Immfp10H1{|}}, {{-}{|}#Immfp10H0{|}} <code>         <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("REDIRECTABLE_FP16") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("REDIRECTABLE_FP16") --></code>   <code>;// Imm order: H1, H0</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "HSET2" } -->

<code>        <code>{@{!}Pg}</code>   <code><b>HSET2</b>{.bval}.cmp{.FTZ}.bop</code>   <code>Rd, {-}{|}Ra{|}{.iswz}, {-}{|}Rb{|}{.iswz}, {!}Pp</code>                             <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("REDIRECTABLE_FP16") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("REDIRECTABLE_FP16") --></code>   <code>;</code>                       </code><!-- SUMMARY_TABLE_INFO { define_opcode => "HSET2" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>HSET2</b>{.bval}.cmp{.FTZ}.bop</code>   <code>Rd, {-}{|}Ra{|}{.iswz}, {-}c[#BankU05][#AddrU16], {!}Pp</code>                       <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("REDIRECTABLE_FP16") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("REDIRECTABLE_FP16") --></code>   <code>;</code>                       </code><!-- SUMMARY_TABLE_INFO { define_opcode => "HSET2" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>HSET2</b>{.bval}.cmp{.FTZ}.bop</code>   <code>Rd, {-}{|}Ra{|}{.iswz}, </code></code>{{-}{|}#Immfp10H1{|}}, {{-}{|}#Immfp10H0{|}},<code><code> {!}Pp</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("REDIRECTABLE_FP16") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("REDIRECTABLE_FP16") --></code>   <code>;// Imm order: H1, H0</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "HSET2" } -->


 .bval:      { <b>.BM*, .BF</b> }<br>             Boolean mask or Boolean float value to set in Rd, default .BM.<br><br> .cmp:       { <b>.F,   .LT,  .EQ,  .LE,  .GT,  .NE,  .GE,  .NUM,</b>    FP16 numeric comparisons<br>               <b>.NAN, .LTU, .EQU, .LEU, .GTU, .NEU, .GEU, .T </b>  }   FP16 numeric or Unordered comparisons<br><br><br> .FTZ:       Flush post-converted input denorms to sign-preserving zero.<br><br> .bop:       { <b>.AND, .OR, .XOR</b>}<br>             Boolean op with predicate {!}Pp<br><br><br><br> .iswz:      { <b>.H1_H0*, .F32, .H0_H0, .H1_H1</b> } <br>             Input format.<br>             .H1_H0:     Input is a set of two 16-bit floating point numbers.<br>             .F32:       Input is a single 32-bit floating point number that<br>                         will be converted to a 16-bit floating point number<br>                         and replicated to both halves of the SIMD operation.<br>                         The conversion will round towards 0 (truncation).<br>                         Any denorms generated in FP32 -&gt; FP16  conversion process will flush to 0. <br>                         <br>             .H0_H0:     Input is a single 16-bit floating point number in the<br>                         lower 16-bits of a 32-bit register, and is replicated<br>                         to both halves of the SIMD operation.<br>             .H1_H1:     Input is a single 16-bit floating point number in the<br>                         upper 16-bits of a 32-bit register, and is replicated<br>                         to both halves of the SIMD operation.<br><br>immfp10H0   Most signficant 10 bits of fp16 immediate.<br>immfp10H1   Most signficant 10 bits of fp16 immediate.<br><br><br>For <b>HSET2</b> with an immediate "Sb" operand .iswz field is not encoded and <br>behavior defaults to .H1_H0 for the immediate operand. Also Absolute values and<br>negates are not encoded and default to false. SASS can support absolute/negates <br>when enclosed in curly braces. e.g {-1.0} or {|-19.5|} and encode appropriate <br>immediates.<br><br>For <b>HSET2</b> with a constant "Sb" operand, .iswz is not encoded and <br>behavior defaults to .F32 for the constant reference operand. Also absolute<br>value for the constant operand defaults to false.<br><br><br></pre>


</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">
	
<p>
First, the components of each input are extracted. Then, for each of the SIMD
halves, <b>HSET</b>.cmp.bop compares the first and second operands with FP16
comparison operation .cmp. The Boolean results are then converted to the
half-precision (fp16) floating point values 0.0 (false) or 1.0 (true).
</p>

<p>
The Boolean operation .bop may be <b>.AND</b>, <b>.OR</b>, or <b>.XOR</b>, 
corresponding to C Boolean operations <b>&amp;</b>, <b>|</b>, and <b>^</b>.
</p>
<pre>    // A[] represents the two halves of the SIMD operation for operand Ra<br>    // B[] represents the two halves of the SIMD operation for operand Sb<br><br>    // Normal mode<br>    Rd.LO = ((A[0] .cmp B[0]) .bop {!}Pp) ? 1.0 : 0.0;<br>    Rd.HI = ((A[1] .cmp B[1]) .bop {!}Pp) ? 1.0 : 0.0;<br><br></pre>

<p>
Use .bop {!}Pp for nested predication, with an inner comparison of A vs. B,
conditioned on outer predicate Pp.
</p>

<p>
The simple instruction format without .bop {!}Pp assembles as <b>.AND</b>,
providing the following effective operation:</p>
<pre>    Rd.LO = (A[0] .cmp B[0]) ? 1.0 : 0.0;<br>    Rd.HI = (A[1] .cmp B[1]) ? 1.0 : 0.0;<br></pre>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre><b>HSET2</b>.GT  R2,  -R0.H1_H0, R1.F32;               # R2.LO = R0.H0 &gt;  R1 ? 1.0 : 0.0,    R2.HI = R0.H1 &gt;  R1 ? 1.0 : 0.0<br><b>HSET2</b>.LTE R2,  -R0.F32,   R1.H0_H0;             # R2.LO = R0    &lt;= R1.H0 ? 1.0 : 0.0, R2.HI = R0    &lt;= R1.H0 ? 1.0 : 0.0<br></pre>

</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body></html>