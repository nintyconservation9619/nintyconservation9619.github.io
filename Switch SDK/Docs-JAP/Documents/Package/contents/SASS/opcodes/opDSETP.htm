<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>DSETP</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    DSETP : FP64 Compare And Set Predicate<br>
    <!-- SUMMARY_TABLE_INFO { description => "FP64 Compare And Set Predicate" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Floating Point Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "DSETP", subsection => 2 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>DSETP</b>.cmp</code>       <code>Pu,     {-}{|}Ra{|}, {-}{|}Sb{|}</code>          <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "DSETP" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>DSETP</b>.cmp.bop</code>   <code>Pu, Pv, {-}{|}Ra{|}, {-}{|}Sb{|}, {!}Pp</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "DSETP" } -->

  .cmp:   { <b>.F,   .LT,  .EQ,  .LE,  .GT,  .NE,  .GE,  .NUM,</b>    FP64 numeric comparisons
            <b>.NAN, .LTU, .EQU, .LEU, .GTU, .NEU, .GEU, .T </b>  }   FP64 numeric or Unordered comparisons

  .bop:   { <b>.AND, .OR, .XOR</b> } 

The following source Sb is allowed:
    Sb(even aligned register)
    Sb(64-bit constant with immediate address)
	if lower 3 address bits are 0x4, the 64 bit constant is (c[][addr&amp;~7|0x4] &lt;&lt; 32)
	if lower 3 address bits are 0x0, the 64 bit constant is (c[][addr|0x4] &lt;&lt; 32) | c[][addr])
    Sb(#IMM20&lt;&lt;44)
</pre>

<p>
Note that the source registers have to be even aligned.</p>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
<b>DSETP</b>.cmp.bop compares FP64 register pair Ra and source operand Sb with
FP64 comparison operation .cmp, combines the Boolean comparison result with
predicate operand {!}Pp using the Boolean operation .bop, and sets two
predicate registers Pu and Pv to Boolean values based on the comparison.
The Boolean operation .bop may be <b>.AND</b>, <b>.OR</b>, or <b>.XOR</b>, 
corresponding to C Boolean operations <b>&amp;</b>, <b>|</b>, and <b>^</b>.</p>
<pre>
    Pu =  (Ra .cmp Sb)  .bop {!}Pp;     
    Pv =(!(Ra .cmp Sb)) .bop {!}Pp; 
</pre>

<p>
Use .bop {!}Pp for nested predication, with an inner comparison of Ra vs. Sb,
conditioned on outer predicate Pp. </p>
<p>
The simple instruction format without .bop {!}Pp assembles as <b>.AND PT</b>,
and Pv is PT, with the following effective functionality:</p>
<pre>
    Pu =  (Ra .cmp Sb);
</pre>

<p>
Double precision compares do NOT flush denormalized operands to zero prior to comparison.</p>

</div>


<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>DSETP.LT</b>      P1,     R0, -|R2|;
<b>DSETP.NEU.AND</b> P1, P4, R0, -R2, P3;
</pre>

</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">back to Index of Instructions</a></p>
</div>
</body>
</html>
