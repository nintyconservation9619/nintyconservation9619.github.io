<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>MUFU</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    MUFU : Multi Function Operation<br>
    <!-- SUMMARY_TABLE_INFO { description => "Multi Function Operation" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Floating Point Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "MUFU", subsection => 1 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>MUFU</b>.op{.SAT}</code>   <code>Rd,{-}{|}Ra{|}</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "MUFU" } -->

 .op:        { <b>.COS, .EX2, .LG2, .RCP, .RSQ, .SIN, .RCP64H, .RSQ64H, .SQRT </b>} 
             .COS - cosine                        // must pre-process with RRO
             .EX2 - exponent base 2               // must pre-process with RRO
             .LG2 - logarithm base 2
             .RCP - reciprocal
             .RSQ - reciprocal square root
             .SIN - sine                          // must pre-process with RRO
             .RCP64H - reciprocal                 // fp64: high 32b (1.11.20) input, same format output
             .RSQ64H - reciprocal square root     // fp64: high 32b (1.11.20) input, same format output
             .SQRT - square root

 .SAT:       saturate output to (+0.0,1.0) (NaN is converted to +0.0f).
             Ignored for .RCP64H and RSQ64H.

</pre>
<p>
.op must be specified. No default.</p>
<p>
Denorm input/output is flushed to sign preserving 0.0. Denorm is different between fp32
and fp64.</p>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
Hardware multi-function op.  Performs the operation specified by .op.   
SIN, COS, and EX2 operations must first be preprocessed with RRO.</p>

<p>
Computing the reciprocal or reciprocal square root of double-precision
fp64 numbers uses the .RCP64H or .RSQ64H modes (respectively) as a starting
point in a longer sequence.</p>

<p>
Computing exactly rounded reciprocal and reciprocal square roots can be done
with a longer sequence of instructions as well.</p>

</div>

<!-- ############################### -->
<!-- # Additional Information      # -->
<!-- ############################### -->
<h2>Additional Information:</h2>
<div class="AdditionalInformation">
<p>
For all operations below, input NaNs and operations that would result in NaN generate
 NVIDIA canonical NaN (0x7fff_ffff). 
</p>

<h4>COS:</h4>
<p>Cosine function. The input is a special 1.1.7.23 format 32b word generated by RRO.</p>
<pre>
  COS(-denorm) gives 1.0
  COS(-0.0)    gives 1.0
  COS(+0.0)    gives 1.0
  COS(+denorm) gives 1.0
  COS(-Inf)    gives NaN
  COS(+Inf)    gives NaN
  COS(NaN)     gives NaN
</pre>
<p>
  COS Accuracy: absolute |error| &lt;= 2^-20.9 in quadrant 00.<br>
  Note that COS cannot operate directly on a float, the input has to be preprocessed with RRO first.
</p>

<h4>EX2:</h4>
<p>Exponential base2 function. The input is a special 1.1.7.23 format 32b word generated by RRO.</p>
<pre>
  EX2(-denorm)           gives +1.0
  EX2(-0.0)              gives +1.0
  EX2(+0.0)              gives +1.0
  EX2(+denorm)           gives +1.0
  EX2(-Inf) or underflow gives +0.0
  EX2(+Inf) or overflow  gives +Inf
  EX2(NaN)               gives NaN
</pre>
<p>
  EX2 Accuracy: absolute |error| &lt;= 2^-22.5 for fractional part. <br>
  Note that EX2 cannot operate directly on a float, the input has to be preprocessed with RRO first.
</p>

<h4>LG2:</h4>
<p>Logarithm base2 function.</p>
<pre>
  LG2(-denorm) gives -Inf
  LG2(-0.0)    gives -Inf
  LG2(+0.0)    gives -Inf
  LG2(+denorm) gives -Inf
  LG2(-Inf)    gives NaN
  LG2(+Inf)    gives +Inf
  LG2( NaN)    gives NaN
</pre>
<p>
  LG2 Accuracy: absolute |error| &lt;= 2^-22.6 for mantissa.
</p>

<h4>RCP:</h4>
<p>Reciprocal function. Output must be exactly 1.0 if the input is exactly 1.0.</p>
<pre>
  RCP(-denorm) gives -Inf
  RCP(-0.0)    gives -Inf
  RCP(+0.0)    gives +Inf
  RCP(+denorm) gives +Inf
  RCP(-Inf)    gives -0.0
  RCP(+Inf)    gives +0.0
  RCP(NaN)     gives NaN
</pre>
<p>
  RCP Accuracy: absolute |error| &lt;= 2^-23.0 over the range 1.0-2.0.
</p>

<h4>RSQ:</h4>
<p>Reciprocal square root function. Output must be exactly 1.0 if the input is exactly 1.0.</p>
<pre>
  RSQ(-denorm) gives -Inf
  RSQ(-0.0)    gives -Inf
  RSQ(+0.0)    gives +Inf
  RSQ(+denorm) gives +Inf
  RSQ(-Inf)    gives NaN
  RSQ(+Inf)    gives +0.0
  RSQ(NaN)     gives NaN
</pre>
<p>
  RSQ Accuracy: absolute |error| &lt;= 2^-22.4 over the range 1.0-4.0.
</p>

<h4>SIN:</h4>
<p>Sine function. The input is a special 1.1.7.23 format 32b word generated by RRO.</p>
<pre>
  SIN(-denorm) gives -0.0
  SIN(-0.0)    gives -0.0
  SIN(+0.0)    gives +0.0
  SIN(+denorm) gives +0.0
  SIN(-Inf)    gives NaN
  SIN(+Inf)    gives NaN
  SIN(NaN)     gives NaN
</pre>
<p>
  SIN Accuracy: absolute |error| &lt;= 2^-20.9 in quadrant 00.<br>
  Note that SIN cannot operate directly on a float, the input has to be preprocessed with RRO first.
</p>

<h4>RCP64H:</h4>
<p>FP64 Reciprocal.
  Input is 32b register containing the high 32b of a fp64 value (1.11.20). 
  Output is also the high 32b of a fp64 value.
</p>
<p>
  Output must be exactly 1.0 if the input is exactly 1.0.
</p>
<pre>
  RCP64H(-denorm) gives -Inf
  RCP64H(-0.0)    gives -Inf
  RCP64H(+0.0)    gives +Inf
  RCP64H(+denorm) gives +Inf
  RCP64H(-Inf)    gives -0.0
  RCP64H(+Inf)    gives +0.0
  RCP64H(NaN)     gives NaN
</pre>
<p>
  RCP64H Accuracy: close to 2^-20
</p>

<h4>RSQ64H:</h4>
<p>FP64 Reciprocal square root.
  Input is 32b register containing the high 32b of a fp64 value (1.11.20). 
  Output is also the high 32b of a fp64 value.</p>
<p>
  Output must be exactly 1.0 if the input is exactly 1.0.
</p>
<pre>
  RSQ64H(-denorm) gives -Inf
  RSQ64H(-0.0)    gives -Inf
  RSQ64H(+0.0)    gives +Inf
  RSQ64H(+denorm) gives +Inf
  RSQ64H(-Inf)    gives NaN
  RSQ64H(+Inf)    gives +0.0
  RSQ64H(NaN)     gives NaN
</pre>
<p>
  RSQ64H Accuracy: close to 2^-20
</p>

<h4>SQRT:</h4>
<p>Square root function.  Output must be exactly 1.0 if the input is exactly 1.0.
</p>
<pre>
  SQRT(-denorm) gives -0.0
  SQRT(-0.0)    gives -0.0
  SQRT(+0.0)    gives +0.0
  SQRT(+denorm) gives +0.0
  SQRT(-Inf)    gives NaN
  SQRT(+Inf)    gives +Inf
  SQRT(NaN)     gives NaN
</pre>
<p>
  SQRT Accuracy: close to 2^-20
</p>



</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>MUFU</b>.COS.SAT      R0,R1;
<b>MUFU</b>.RCP64H       R3,R1;
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
