<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>GETCRSPTR</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    GETCRSPTR : Get Call Return Stack Pointer<br>
    <!-- SUMMARY_TABLE_INFO { description => "Get Call Return Stack Pointer" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Miscellaneous Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "GETCRSPTR", subsection => 15 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code><b>GETCRSPTR</b></code>   <code>Rd</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "GETCRSPTR" } -->

</pre>
</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>Control flow operations use a per-warp hardware managed stack of
   call/return tokens. <b>GETCRSPTR</b> returns information on the current
   warp's stack pointer.
</p>
<p>The result of <b>GETCRSPTR</b> is a 32-bit value containing these fields:
</p>
<pre>
    bits  field
    --------------------------
   16: 0  curPhysStackDepth
   22:17  reserved
   30:23  curApiCallDepth
   31:31  KillFutureBranch
</pre>

<p>'curPhysStackDepth' is the number of tokens currently on the stack,
   rounded up to the next multiple of 4. For example, if the instruction
   stream consisted solely of 125 <b><a href="opSSY.htm">SSY</a></b>
   instructions, then <b>GETCRSPTR</b> will return a value of
   'curPhysStackDepth' of 128. The value of 'curPhysStackDepth' is
   independent of the state of the physical stack cache that the SM may
   implement.
</p>
<p>'curApiCallDepth' is the current depth of the API-visible call-stack,
   in entries. 'curApiCallDepth' is updated by the non-.NOINC variants 
   of <b><a href="opCAL.htm">CAL</a></b>, <b><a href="opCAL.htm">JCAL</a></b>,
   and <b><a href="opRET.htm">PRET</a></b>.
</p>
<p>'KillFutureBranch' is the state of the result of the limit check
    performed by the non-.NOINC variant of
    <b><a href="opRET.htm">PRET</a></b>. This state is only used to 
    control subsequent <b><a href="opBRA.htm">BRA</a>.LMT</b>
    or <b><a href="opBRA.htm">JMP</a>.LMT</b> instructions.
</p>


</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>GETCRSPTR</b> R0;
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
