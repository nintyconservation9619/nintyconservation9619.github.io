<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>ISETP</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    ISETP : Integer Compare And Set Predicate<br>
    <!-- SUMMARY_TABLE_INFO { description => "Integer Compare And Set Predicate" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Integer Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "ISETP", subsection => 2 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>ISETP</b>.cmp{.fmt}{.X}</code>       <code>Pu,     Ra, Sb</code>          <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "ISETP" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>ISETP</b>.cmp{.fmt}{.X}.bop</code>   <code>Pu, Pv, Ra, Sb, {!}Pp</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "ISETP" } -->

.cmp:     { <b>.F, .LT, .EQ, .LE, .GT, .NE, .GE, .T </b>}   Unsigned and signed comparisons
          { <b>    .LO,      .LS, .HI,      .HS,    </b>}   Unsigned comparisons only

.fmt:     { <b>.U32, .S32* </b>}
          Default compare format is signed .S32, except unsigned .LO,
          .LS, .HI, .HS where the default compare format is .U32. The
          assembler throws a syntax error if signed format <b>.S32</b>
          is explicitly combined with an unsigned comparison test.   

.X        Extended precision compare 

.bop:     { <b>.AND, .OR, .XOR </b>}      Boolean op with predicate {!}Pp

<b>ISETP</b> allows the following for Sb:
    Rb                         32-bit register
    c[ImmU05][ImmU16]          32-bit constant with immediate slot and byte address
    ImmS20                     32-bit sign-extended 20-bit immediate
</pre>


</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
<b>ISETP</b>.cmp.bop compares register Ra and source operand Sb with integer comparison 
operation .cmp, combines the Boolean comparison result with predicate operand {!}Pp using 
Boolean operation .bop, and sets two predicate registers Pu and Pv to Boolean values 
based on the comparison.  The Boolean operation .bop may be <b>.AND, .OR</b>, or <b>.XOR</b>, 
corresponding to C Boolean operations <b>&amp;, |</b>, and <b>^</b>.</p>
<pre>
    Pu =  (Ra .cmp Sb)  .bop {!}Pp;     
    Pv =(!(Ra .cmp Sb)) .bop {!}Pp; 
</pre>

<p>
The simple instruction format without .bop {!}Pp assembles as <b>.AND
PT</b>, and Pv is PT, giving the following functionality:</p>
<pre>
    Pu =  (Ra .cmp Sb);         // Set predicate to 1 if comparison test is true, else to 0
</pre>

<p>
Extended integer compare suffix .cmp{.fmt}<b>.X</b> compares Ra and Sb by subtracting Ra - Sb with a borrow from 
the condition code carry flag CC.CF, i.e. by computing Ra + ~Sb + CC.CF, comparing that with zero, and 
considering the condition code zero flag CC.ZF set by a prior subtraction.  ISETP.cmp.X may follow a 
sequence of IADD and IADD.X instructions that perform an extended-precision (multi-word) subtraction, 
thereby completing the most-significant word of an extended-precision comparison.  ISETP.cmp.X determines 
whether the extended .cmp.X comparison test is zero by ANDing the extended compare difference zero-ness 
with the prior condition code zero flag CC.ZF.</p>

</div>


<!-- ############################### -->
<!-- # Additional Information      # -->
<!-- ############################### -->
<h2>Additional Information:</h2>
<div class="AdditionalInformation">

<p>Use .bop {!}Pp for nested predication, with an inner comparison of Ra
vs. Sb, conditioned on outer predicate Pp.  This example: </p>
<pre>
    <b>ISETP.LT.AND</b>  Pu, Pv, Ra, Sb, Pp;
</pre>

<p>
sets predicate registers Pu and Pv for if/else (Ra &lt; Rb), within a block predicated on Pp:</p>
<pre>
    Pu =  (Ra &lt; Rb)  &amp; Pp;
    Pv =(!(Ra &lt; Rb)) &amp; Pp;
</pre>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>ISETP.LT</b>         P1, R1, R2;           // P1 = (R1.S32 &lt; R2.S32);   default signed format
<b>ISETP.LT.S32</b>     P1, R1, R2;           // identical instruction with explicit signed format

<b>ISETP.LO</b>         P1, R1, R2;           // P1 = (R1.U32 &lt; R2.U32);   .LO =&gt; default unsigned format
<b>ISETP.LO.U32</b>     P1, R1, R2;           // identical instruction with explicit unsigned format
<b>ISETP.LT.U32</b>     P1, R1, R2;           // identical instruction with explicit unsigned format

<b>ISETP.LO.AND</b>     P1, P4, R1, R2, !P3;  // P1 = (R1.U32 &lt; R2.U32) &amp; !P3;  P4 = !(R1.U32 &lt; R2.U32) &amp; !P3;
<b>ISETP.LO.U32.AND</b> P1, P4, R1, R2, !P3;  // P1 = (R1.U32 &lt; R2.U32) &amp; !P3;  P4 = !(R1.U32 &lt; R2.U32) &amp; !P3;

// compare extended 64-bit signed integers [R1,R0] &lt;= [R3,R2]
<b>IADD</b>             RZ.CC, R0, -R2;       // subtract low word R0 - R2, CC.CF = carry-out, CC.ZF = zero-sum
<b>ISETP.LE.S32.X</b>   P1, R1, R3;           // high word extended compare (R1 &lt;=.X R3) does extended subtract: 
                                              // diff = (R1 + ~R3 + CC.CF); 
                                              // P1 = ((diff &lt; 0) || ((diff == 0) &amp;&amp; CC.ZF));

</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
