<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>LOP</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    LOP : Logic Operation<br>
    <!-- SUMMARY_TABLE_INFO { description => "Logic Operation" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Integer Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "LOP32I", subsection => 2 } -->
<!-- SUMMARY_TABLE_INFO { opcode => "LOP", subsection => 2 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>LOP</b>.lop{.X}{.pop}</code>   <code>{Pu,} Rd     , {~}Ra, {~}Sb</code>       <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "LOP" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>LOP</b>.lop{.X}</code>         <code>      Rd{.CC}, {~}Ra, {~}Sb</code>       <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "LOP" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>LOP32I</b>.lop{.X}</code>      <code>      Rd{.CC}, {~}Ra, {~}#Imm32</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "LOP32I" } -->

 .lop:   logical operation   { <b>.AND, .OR, .XOR, .PASS_B</b> } 
 .pop:   predicate operation { .F*, .T, .Z, .NZ }
 .X   :    Extended precision logical operation


 .CC  :    Write condition codes

<b>LOP</b> allows the following source Sb:
    Sb(register)
    Sb(constant with immediate address)
    Sb(#IMM20)
</pre>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description</h2>
<div class="Description">

<p>
Logical operation of sources into destination.  Sources have an optional 1's complement.</p>
<p>
An extended-precision logical operation is performed by processing words in order from
least-significant to most-significant.  This order is required so that the sign flag will
be set correctly based on the msb of the most-significant word.  The zero flag is
accumulated by LOP.X instructions.</p>

If a predicate destination is specified, result of the predicate operation is written back to destination register. 
</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">


<pre>
<b>LOP</b>.OR          R0, R1, R2;
<b>LOP</b>.XOR     P3, R0, R1, R2;
<b>LOP32I</b>.AND      R0, R1, 0x12345678;
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
