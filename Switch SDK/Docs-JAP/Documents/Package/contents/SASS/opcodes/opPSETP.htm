<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>PSETP</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    PSETP : Combine Predicates and Set Predicate<br>
    <!-- SUMMARY_TABLE_INFO { description => "Combine Predicates and Set Predicate" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Predicate/CC Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "PSETP", subsection => 4 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>PSETP</b>.bop0</code>        <code>Pu,     {!}Pp, {!}Pq</code>          <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "PSETP" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>PSETP</b>.bop0.bop1</code>   <code>Pu, Pv, {!}Pp, {!}Pq, {!}Pr</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "PSETP" } -->

 .bop0:  { <b>.AND, .OR, .XOR</b> } 
 .bop1:  { <b>.AND, .OR, .XOR</b> } 

</pre>


</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
<b>PSETP</b>.bop0.bop1 sets two destination predicates Pu and Pv to Boolean values based on Boolean 
combinations .bop0 and .bop1 of source predicate operands {!}Pp, {!}Pq, and {!}Pr.</p>
<pre>
    Pu = (  {!}Pp  .bop0 {!}Pq ) .bop1 {!}Pr;
    Pv = ( (!{!}Pp) .bop0 {!}Pq) .bop1 {!}Pr;
</pre>

<p>
The simple instruction format without .bop1 {!}Pr assembles as .AND
PT, and Pv is PT, yielding effectively:</p>
<pre>
    Pu = ( {!}Pp .bop0 {!}Pq );
</pre>

<p>
Predicate source operands {!}Pp, {!}Pq, and {!}Pr are 1-bit predicate registers with 
optional complements.</p>
<p>
Predicate destination operands Pu and Pv are 1-bit predicate registers.  
To not write predicate Pu or Pv, specify predicate PT, which ignores writes.</p>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>PSETP.AND</b>    P1,     P2, !P3;
<b>PSETP.AND.OR</b> P1, P4, P2, !P3, P4;

</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
