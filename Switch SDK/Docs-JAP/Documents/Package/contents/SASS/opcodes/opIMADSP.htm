<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>IMADSP</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    IMADSP : Extracted Integer Multiply And Add.<br>
    <!-- SUMMARY_TABLE_INFO { description => "Extracted Integer Multiply And Add." } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Integer Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "IMADSP", subsection => 2 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>


<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>IMADSP</b>.saext.sbext.scext</code>   <code>Rd{.CC},Ra,Sb,Sc</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "IMADSP" } -->

 .saext : { .U32, .S32, .U24. .S24, .U16H0, .S16H0, .U16H1, .S16H1 }   // operand extract modifier
 .sbext : { .U24, .S24, .U16H0, .S16H0 }                               // operand extract modifier
 .scext : { .U32, .S32, .U24, .S24, .U16H0, .S16H0 }                   // operand extract modifier

<b>IMADSP</b> allows the following sources Sb,Sc:
    Sb(register),                         Sc(register)
    Sb(constant with immediate address),  Sc(register)
    Sb(#Imm20),                           Sc(register)
    Sb(register),                         Sc(constant with immediate address)
</pre>


<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
Multiply and add sources (smaller than or equal to 32 bits) to produce single precision (32 bits) result.  </p>
<p>
IMADSP operates as follows. First the operands are extracted/sign extended based on the saext/sbext/scext modifiers.
These ext modifiers define if the data container is the whole 32 bits or 24 lsb bits or top 16 bits or bottom 16 bits.</p>

<p>saext/sbext/scext are the operand extract modifiers to extract 16/24/32 bit
   part selects out of A/B/C operands (similar to <a href="opVMAD.htm">VMAD</a>).
   In case of saext/sbext, these modifiers also define the signed/unsigned
   behavior of the operands.</p>

<p>After extracting the correct bits, the operands are extended (based on
   signed or unsigned) to full 32 bits. The sign of operand C is signed if
   any of the Ra/Sb is signed. Thus only following multiplication combinations
   are possible (post extention)</p>

<pre>

   tmp =  (RaExtracted  * SbExtracted) + RcEtracted:
   tmp =  (U32 * U32) + U32   // intermediate unsigned; final unsigned
   tmp =  (U32 * S32) + S32   // intermediate   signed; final   signed
   tmp =  (S32 * U32) + S32   // intermediate   signed; final   signed
   tmp =  (S32 * S32) + S32   // intermediate   signed; final   signed

   Note: The intermediate sign of the multiply (Ra*Sb) will be unsigned if Both Ra and Sb are unsigned.
	 Otherwise, the intermediate sign will be signed.
</pre>

<p>
The sign of source C and final destination will be same as the intermediate sign. </p>


</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>IMADSP.U24.U24.U16H0</b> R0,R1,R2,R3;
<b>IMADSP.S24.S24.S16H0</b> R0,R1,R2,R3;
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
