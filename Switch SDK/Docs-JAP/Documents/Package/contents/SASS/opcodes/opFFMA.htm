<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>FFMA</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    FFMA : FP32 Fused Multiply and Add<br>
    <!-- SUMMARY_TABLE_INFO { description => "FP32 Fused Multiply and Add" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Floating Point Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "FFMA32I", subsection => 0 } -->
<!-- SUMMARY_TABLE_INFO { opcode => "FFMA", subsection => 0 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">
<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>FFMA</b>{.fmz}{.rnd}{.SAT}</code>   <code>Rd{.CC},{-}Ra,{-}Sb,   {-}Sc</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>                           </code><!-- SUMMARY_TABLE_INFO { define_opcode => "FFMA" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>FFMA32I</b>{.fmz}{.SAT}</code>      <code>Rd{.CC},{-}Ra, #Imm32, {-}Rd</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>// Rc must be same as Rd;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "FFMA32I" } -->

 .fmz:       { <b>&lt; NULL &gt;*, .FTZ, .FMZ, INVALID</b> } 
             .fmz controls denorm flush and multiply mode.
               &lt; NULL &gt;: Denorms supported. No special handling of 0.
                         This is default.
               .FTZ:     Flush input/output denorms to sign-preserving zero.
               .FMZ:     Flush input/output denorms to sign-preserving zero AND
                         if either source is 0.0, the product is forced to +0.0
                         (even if other source is infinity or NaN), regardless
                         of the input signs. The 0.0 test is done after input
                         denorm flush.


 .rnd:       { <b>.RN*, .RM, .RP, .RZ</b> } 
             .RN - Round to the nearest even.
             .RM - Round towards -Infinity
             .RP - Round towards +Infinity
             .RZ - Round towards 0

 .SAT:       output saturate (.SAT) to (+0.0f,1.0f), with NaN converted to +0.0f.

 .CC:        Write condition codes

<b>FFMA</b> allows the following sources Sb,Sc:
    Sb(register),                         Sc(register)
    Sb(constant with immediate address),  Sc(register)
    Sb(#Imm20&lt;&lt;12),                       Sc(register)
    Sb(register),                         Sc(constant with immediate address)
</pre>

<p>
For <b>FFMA32I</b> .rnd defaults to .RN</p>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">
	
<p>
The product of Ra and Sb is computed to infinite precision and then Sc is
added with a precision sufficient to guarantee that after rounding, the result
is identical to that of an add with infinite precision followed by the
rounding. The rounding is done to single precision (fp32) using the .rnd
rounding mode.</p>

<p>
See the IEEE-754 2008 standard, section 5.4.1 for details.</p>

</div>

<!-- ###################################### -->
<!-- # IEEE Rounding Modes                # -->
<!-- ###################################### -->
<h3>IEEE Rounding Modes</h3>
<div class="IEEERoundingModes">

<p>
Fp32 operations support all 4 required IEEE-754 2008 rounding modes:</p>
<dl>
<dt>.RN</dt><dd>roundTiesToEven</dd>
<dt>.RM</dt><dd>roundTowardNegative</dd>
<dt>.RP</dt><dd>roundTowardPositive</dd>
<dt>.RZ</dt><dd>roundTowardZero</dd>
</dl>

<p>
The optional IEEE rounding mode <em>roundTiesToAway</em> is not supported.</p>

<p>See the IEEE-754 2008 specification, Section 4.3.3.</p>

</div> <!-- IEEERoundingModes -->


<!-- ###################################### -->
<!-- # NaN Behavior                       # -->
<!-- ###################################### -->
<h3>NaN Behavior:</h3>
<div class="NaNBehavior">

<p>
The chosen NaN behavior for fp32 operations is different than that of fp64
operations. The chosen fp32 behavior is different from Intel's x87/SSE behavior,
but is still IEEE-754 2008 compliant when <code>.FMZ</code> is not used: The
standard allows canonicalization of the NaN result to be implementation-defined.
See the IEEE-754 2008 specification, Section 6.2.</p>

</div> <!-- NanBehavior -->
</div> <!-- AdditionalInformation -->

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>FFMA</b>    R0,R1,R2,R3;
<b>FFMA32I</b> R0,R1,0x3d000000,R0;
</pre>

</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
