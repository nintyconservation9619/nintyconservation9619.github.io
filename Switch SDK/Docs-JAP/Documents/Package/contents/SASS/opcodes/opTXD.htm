<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>

<title>TXD</title><link rel="StyleSheet" href="../style.css" type="text/css" title="general"></head>

<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    TXD : Texture Fetch With Derivatives <br>
    <!-- SUMMARY_TABLE_INFO { description => "Texture Fetch With Derivatives " } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Texture Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "TXD", subsection => 4 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format</h2>
<div class="Format">

<pre>SPA 5.0:<br><code>        <code>{@{!}Pg}</code>   <code><b>TXD</b>{.B}{.LC}{.AOFFI}{.NODEP}{.phase}</code>   <code>{Ps,} Rd, Ra, Rb, #tsPtrIdxU13, #paramA{, #wmskU04}</code>       <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "TXD" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>TXD</b>{.B}{.LC}{.AOFFI}{.NODEP}{.phase}</code>   <code>{Ps,} Rd, Ra, Rb, #tidU08, #smpU05, #paramA{, #wmskU04}</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "TXD" } -->

  .B:      Bindless mode, where the texture header pointer and sampler pointer is packed into a 32 bit register as:
           samplerPtr[31:20] | headerPtr[19:0]
           Data is sent via register Ra.

  .LC: LOD Clamp value for Sparse Textures.
          A 12 bit (u4.8 format) value. Packed with the ARRAY index in the same register.

  .AOFFI:  Programmable Texel Offset.
              _aoffimmi(u,v,w)  [DX10]   // 1 register required
                  ((v &amp; 0xf)&lt;&lt;4) | (u &amp; 0xf)
		  Each 4b field is a 2's complement integer from -8 to +7.

  .NODEP:  Indicates that there is no subsequent quad derivatives to be calculated.
	   Threads that have been "<a href="opKIL.htm">killed</a>" will be disabled to stop unnecessary texture fetches.<br><br>  .phase:  Allows control on the current warps texture hash, used for scheduling.<br>               &lt; NONE &gt;<br>               .T - postfix increment of the 3 bit texture component of the hash.<br>	       .P - postfix increment of the 5 bit phase component, and zero out the 3 bit texture component of the hash. <br><br>Ps:<br>            Predicate returning sparse tile status. Indiate that the surface access is happening to a page marked as sparse (not valid).<br><br>Immediate Inputs:<br><br>  #tsPtrIdxU13:<br>     This immediate index (word address) used to fetch the packed header+sampler pointer entry from constant cache.  The bank from<br>     which it is fetched is determined by bundle state. The constant bank entry is 32 bit structure of the form<br>     "samplerPtr[31:20] | headerPtr[19:0]".<br>     Note: Ignored if .B option is used.<br>     In SetSamplerBinding.ViaHeaderBinding (i.e. OGL) mode, the headerPtr would be used as the samplerPtr as well. <br>     Any header pointer greater than one specified in SetTexHeaderPoolC.MaximumIndex will be regarded as an "invalid"<br>     texture (i.e. equivalent to BIND_GROUP_TEXTURE_HEADER_VALID_FALSE in fermi).<br>     Any sampler pointer greater than one specified in SetSamplerHeaderPoolC.MaximumIndex will be regarded as an<br>     "invalid" texture (i.e. equivalent to BIND_GROUP_TEXTURE_HEADER_VALID_FALSE in fermi).<br><br>  #tidU08, #smpU05:<br>     This is the "almost" Fermi-compatible specification of tsPtrIdxU13 which allows running of legacy apps/traces<br>     where sass will transform these into tsPtrIdxU13 as follows:<br>     tsPtrIdxU13 = {#smpU05, #tidU08}<br><br></pre>

<pre>#paramA: source coordinate description.<br></pre>
<div style="margin-left: 2em; font-size: 100%;">
<table border="1" cellpadding="5%">
    <caption><em>Valid paramA specifiers for TXD </em></caption>
    <tbody><tr><th>parameter</th><th>Coordinate Registers implied</th></tr>
     <tr><td> 1D</td><td>s</td></tr>
     <tr><td> 2D</td><td>s,t</td></tr>
     <tr><td> RESERVED</td><td>// for 3D</td></tr>
     <tr><td> RESERVED</td><td>// for CUBE</td></tr>
     <tr><td> ARRAY_1D</td><td>a,s</td></tr>
     <tr><td> ARRAY_2D</td><td>a,s,t</td></tr>
     <tr><td> RESERVED</td><td>// for ARRAY_3D</td></tr>
     <tr><td> RESERVED</td><td>// for ARRAY_CUBE</td></tr>
</tbody></table>
</div>
<pre>           s,t,r are fp32, <br>           a is U16 integer<br></pre>

<pre>
     If the source coordinate description does not match the texture type of the texture header,
     zeroes will be returned.  The array specifiers can be freely used with non-array textures
     (and the opposite holds as well), provided the number of coordinates (1D,2D) matches.

  #wmskU04       destination write mask (decimated contiguous writes)
     Allows for write masking the returning data writes via a bit enable
     for each of R,G,B,A. A four-vector is always returned from TXD.
     #wmskU04 defaults to 0xf.

  Neither Ra nor Rb can be RZ.
</pre>
</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description</h2>
<div class="Description">

<p>
Texture fetch using a texture coordinate vector and derivatives.</p>
<p>
<b>Note: TXD hardware does not support CUBE and 3D. These must still be emulated by SHFL/TEX.</b></p>
<p>
The parameter assignment in register Ra/Rb is as follows:

</p><table border="1" cellpadding="5%">
    <caption><em>Texture parameter packing in Ra and Rb </em></caption>
<tbody><tr>
    <th> Reg </th>
    <th> parameter </th>
    <th> format </th>
</tr>
<tr>
    <td> Ra+0 </td>
    <td> {&amp;nbspSamplerPtr[31:20]&nbsp;|&amp;nbspHeaderPtr[19:0]&nbsp;} </td>
    <td> u32 </td>
</tr>
<tr>
    <td> Ra+1 </td>
    <td> s </td>
    <td> fp32 </td>
</tr>
<tr>
    <td> Ra+2 </td>
    <td> t </td>
    <td> fp32 </td>
</tr>
<tr>
    <td> Ra+3 </td>
    <td> (.LC)&nbsp;?&nbsp;{&amp;nbspLodClamp[31:20]&nbsp;|&amp;nbsptoff[19:12]&nbsp;|&amp;nbsparray[11:0]&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp:&nbsp;{&amp;nbsptoff[27:16]&nbsp;|&amp;nbsparray[15:0]&nbsp;} </td>
    <td> u32 </td>
</tr>
<tr>
    <td> Rb+0 </td>
    <td> dsdx </td>
    <td> fp32 </td>
</tr>
<tr>
    <td> Rb+1 </td>
    <td> dsdy </td>
    <td> fp32 </td>
</tr>
<tr>
    <td> Rb+2 </td>
    <td> dtdx </td>
    <td> fp32 </td>
</tr>
<tr>
    <td> Rb+3 </td>
    <td> dtdy </td>
    <td> fp32 </td>
</tr>
</tbody></table>

<br> In the table above, "+0/1/2/3" represents the order of packing
parameters in Ra/Rb. If a parameter is not specified, then the rest are
compacted upwards <em>within</em> the same Ra or Rb register.
<p>
The texture parameter source registers Ra/Rb and the destination (result) register Rd
have alignment restrictions based on the number of scalar registers being read/written. Specifically, 
</p><ol> 
	<li> Rd should be aligned to number of valid components being returned (as specified by wmask) </li>
	<li> Ra/Rb should always be aligned to </li>
	<ol style="list-style-type: lower-alpha;">
		<li> 1 (scalar register) if the scalar count for that register (Ra or Rb) is 1 </li>
		<li> 2 (vec2 register)   if the scalar count for that register (Ra or Rb) is 2 </li>
		<li> 4 (vec4 register)   if the scalar count for that register (Ra or Rb) is 3 or 4 </li>
	</ol>
    <li>
Rb should be specified as RZ if no parameters need to be packed in Rb.
(However no error is generated if non-RZ register is specified)</li>
	<li> Ra/Rb must not be specified as RZ if any parameters need to be packed in Ra/Rb.</li>
</ol>

<p>
Some input texture values will be sanitized before being used.</p>
</div>

<!-- ############################### -->
<!-- # Additional Information      # -->
<!-- ############################### -->
<h2>Additional Information:</h2>
<div class="AdditionalInformation">

<p>
Corresponds to these DX ops:</p>
<pre>   sample_d<br></pre>
<p>
<b>Notes about equivalency with TEX instruction:</b></p>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>TXD        R0,R2,R4,5,2D,0xf;<br></pre>

<p>
For OpenGL, it is necessary to premultiply the dy values by SR18 to cancel the effects
of the origin aware DDY expansion (documented in FSWZ).</p>
<pre>S2R R8, SR18;<br>FMUL R5, R5, R8;<br>FMUL R7, R7, R8;<br>TXD        R0,R2,R4,5,2D,0xf;<br></pre>

</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body></html>