<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>CSET</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    CSET : Test Condition Code And Set<br>
    <!-- SUMMARY_TABLE_INFO { description => "Test Condition Code And Set" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Predicate/CC Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "CSET", subsection => 4 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>CSET</b>{.bval}.test</code>       <code>Rd{<b>.CC</b>}, <b>CC</b></code>          <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched>=?WAIT1}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "CSET" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>CSET</b>{.bval}.test.bop</code>   <code>Rd{<b>.CC</b>}, <b>CC</b>, {<b>!</b>}Pp</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched>=?WAIT1}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "CSET" } -->

  .bval:  { <b>.BM*, .BF</b> }          
          Boolean mask (0xffff_ffff) or Boolean float value
          (0x3f80_0000) set in Rd for test condition met

  .test:  { <b>.F,      .LT,     .EQ,     .LE,      .GT,      .NE,      .GE,   .NUM, </b>    Signed numeric tests
            <b>.NAN,    .LTU,    .EQU,    .LEU,     .GTU,     .NEU,     .GEU,  .T,   </b>    Signed or Unordered tests 
            <b>.OFF,    .LO,     .SFF,    .LS,      .HI,      .SFT,     .HS,   .OFT, </b>    Unsigned integer tests
            <b>.CSM_TA, .CSM_TR, .CSM_MX, .FCSM_TA, .FCSM_TR, .FCSM_MX, .RLE,  .RGT  </b>}   Clip State Machine tests

  .bop:   { <b>.AND, .OR, .XOR</b> }    Boolean operation with predicate {!}Pp

  .CC:    Write condition codes
</pre>
</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
<b>CSET</b>{.bval}.test.bop tests Condition Code register <b>CC</b> with <b>CC.</b>test,
combines the Boolean comparison result with predicate operand {!}Pp using 
Boolean operation .bop, and sets destination register Rd to integer ~0x0 or floating point 1.0f 
if the comparison is true, otherwise it sets Rd to 0.  The Boolean operation .bop may be 
<b>.AND, .OR</b>, or <b>.XOR</b>, corresponding to C Boolean operations <b>&amp;, |</b>, and <b>^</b>.</p>
<pre>
    if (.BM) Rd =  ( CC.test .bop {!}Pp )? 0xFFFF_FFFF: 0;     // SET Boolean mask all 1s or all 0s
    if (.BF) Rd =  ( CC.test .bop {!}Pp )? 0x3F80_0000: 0;     // SET Boolean float FP32 1.0f or 0.0f
</pre>

<p>
Use .bop {!}Pp for nested conditions, with an inner CC.test, conditioned on an outer predicate Pp.</p>
<p>
The simple instruction format without .bop {!}Pp assembles as <b>.AND
PT</b>, giving the following effective operation:</p>
<pre>
    if (.BM) Rd =  CC.test? 0xFFFF_FFFF: 0;     // Set Boolean mask all 1s or all 0s
    if (.BF) Rd =  CC.test? 0x3F80_0000: 0;     // Set Boolean float FP32 1.0f or 0.0f
</pre>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>CSET.BF.NEU.AND</b>    R0, CC, P3;
</pre>

</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
