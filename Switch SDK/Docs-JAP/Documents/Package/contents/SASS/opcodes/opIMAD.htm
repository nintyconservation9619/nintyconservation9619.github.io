<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>IMAD</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    IMAD : Integer Multiply And Add<br>
    <!-- SUMMARY_TABLE_INFO { description => "Integer Multiply And Add" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Integer Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "IMAD32I", subsection => 2 } -->
<!-- SUMMARY_TABLE_INFO { opcode => "IMAD", subsection => 2 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>IMAD</b>{.safmt.sbfmt}{.hilo}{.PO}{.SAT}{.X}</code>   <code>Rd{.CC},{-}Ra,{-}Sb,{-}Sc</code>    <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "IMAD" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>IMAD32I</b>{.safmt.sbfmt}{.hilo}{.PO}</code>          <code>Rd{.CC},{-}Ra,#Imm32,{-}Rd</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "IMAD32I" } -->

 .safmt:     { .U32, .S32* }

 .sbfmt:     { .U32, .S32* }

 .hilo:      { <b>.HI, .LO*</b> } 
             If .HI, write the upper 32 bits of the multiply-accumulate result
             into Rd, else, write the lower 32 bits of the multiply-accumulate result.

 .PO:        Plus one (for averaging)      

 .SAT:       Saturate 
             .SAT is only allowed when both inputs are .S32 and .HI is specified.
             The result of the accumulate is clamped to the min/max S32 values instead of
             the default behavior of wrapping.

 .X:         Extended precision accumulate
             
 .CC:        Write condition codes

The following add modes exist for the combination of source negates and .X:
       (Ra*Sb)+Sc:     (Ra*Sb) +  Sc + 0               //
       (Ra*Sb)-Sc:     (Ra*Sb) + ~Sc + 1               //
      -(Ra*Sb)+Sc:    ~(Ra*Sb) +  Sc + 1               //
  .PO                  (Ra*Sb) +  Sc + 1               // for average
   .X  (Ra*Sb)+Sc:     (Ra*Sb) +  Sc + Carry           // extended precision mode
   .X  (Ra*Sb)-Sc:     (Ra*Sb) + ~Sc + Carry           // extended precision mode
   .X -(Ra*Sb)+Sc:    ~(Ra*Sb) +  Sc + Carry           // extended precision mode
   .X -(Ra*Sb)-Sc:     ILLEGAL                         // not supported

    Note: It is illegal to negate both Sc and the result of (Ra*Sb).
    Note: It is illegal to negate any source operand in .PO mode.
    Note: It is illegal to combine .PO with .X
    Note: Unsigned SAT is illegal.

<b>IMAD</b> allows the following sources Sb,Sc:
    Sb(register),                         Sc(register)
    Sb(constant with immediate address),  Sc(register)
    Sb(#Imm20),                           Sc(register)
    Sb(register),                         Sc(constant with immediate address)
</pre>

<p>
<b>IMAD32I</b> requires that Rd and Rc be the same register.</p>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
Multiply and add sources into destination.</p>
<p>
The following modes are supported:</p>
<pre>
   (u32 * u32)[31:00] +  Sc[31:00]
   (u32 * s32)[31:00] +  Sc[31:00]
   (s32 * u32)[31:00] +  Sc[31:00]
   (s32 * s32)[31:00] +  Sc[31:00]
   (u32 * u32)[63:32] + (Sc[31:00]&lt;&lt;32)
   (u32 * s32)[63:32] + (Sc[31:00]&lt;&lt;32)
   (s32 * u32)[63:32] + (Sc[31:00]&lt;&lt;32)
   (s32 * s32)[63:32] + (Sc[31:00]&lt;&lt;32)
   (s32 * s32)[63:32] + (Sc[31:00]&lt;&lt;32) with SAT     // Sc is assumed signed s32
</pre>

<p>
IMAD.X may be used to perform an extended-precision multiplication.  At the
end of the extended-precision multiplication sequence, the condition code
flags reflect the overall multi-word result.  The sign, carry, and overflow
flags are set as usual in .X mode, whereas the zero flag value is accumulated
in .X mode.
</p>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>IMAD</b> R0,R1,R2,R3;
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
