<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>STL, STS</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    STL, STS : Store within Local or Shared Window<br>
    <!-- SUMMARY_TABLE_INFO { description => "Store within Local or Shared Window" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Compute Load/Store Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "STS", subsection => 6 } -->
<!-- SUMMARY_TABLE_INFO { opcode => "STL", subsection => 6 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>STL</b>{.cop}{.sz}</code>   <code>[Ra + ImmS24], Rb</code>   <code><!-- OPEX_COUNT_3 --><!-- BEGIN &opex("MIO_RD_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_SCBD") --></code>   <code>;</code>   <code>// Store within Local window</code>          </code><!-- SUMMARY_TABLE_INFO { define_opcode => "STL" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>STS</b>{.sz}</code>         <code>[Ra + ImmS24], Rb</code>   <code><!-- OPEX_COUNT_3 --><!-- BEGIN &opex("MIO_RD_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_SCBD") --></code>   <code>;</code>   <code>// Store within Shared window</code>         </code><!-- SUMMARY_TABLE_INFO { define_opcode => "STS" } -->

  Omit register Ra to specify an unsigned absolute address within a window:
<code>        <code>{@{!}Pg}</code>   <code><b>STL</b>{.cop}{.sz}</code>   <code>[ImmU24], Rb</code>        <code><!-- OPEX_COUNT_3 --><!-- BEGIN &opex("MIO_RD_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_SCBD") --></code>   <code>;</code>   <code>// Store to absolute Local address</code>    </code><!-- SUMMARY_TABLE_INFO { define_opcode => "STL" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>STS</b>{.sz}</code>         <code>[ImmU24], Rb</code>        <code><!-- OPEX_COUNT_3 --><!-- BEGIN &opex("MIO_RD_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_SCBD") --></code>   <code>;</code>   <code>// Store to absolute Shared address</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "STS" } -->

.cop:    { <b>.WB*, .CG, .CS, .WT</b> }             Cache write-back*, global, streaming, write-thru 
          <b>.WB</b>*   Cache write-back all coherent levels (default*).
          <b>.CG</b>    Cache at global level (cache in L2 and below; L1 cache lines marked as evict-first.
          <b>.CS</b>    Cache streaming, likely to be accessed once (mark for early eviction).
          <b>.WT</b>    Cache write-through (to system memory).

.sz:     { <b>.8, .U8, .S8, .16, .U16, .S16, .32*, .64, .128</b> } 

</pre>
</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description</h2>
<div class="Description">

<b>STS</b> and <b>STL</b> stores register Rb to memory at a shared or local
thread addresses (respectively) specified as [Ra + ImmS32] or as [ImmU32]. 
</p>

<p>
If register Ra is omitted, equal to <tt>RZ</tt>, or beyond the set of
registers supported for the shader, the effective address is the
zero-extended absolute <b>unsigned</b> immediate offset.
An omitted <tt>Ra</tt> register is assembled as <tt>RZ</tt>.
Otherwise, the effective address is equal to the sum of register Ra
(or <tt>{Ra+1, Ra}</tt> when .E is specified), and the signed-extended
<b>signed</b> immediate offset. A negative offset is written as
<tt>[Ra - offset]</tt> or <tt>[Ra + -offset]</tt>. An omitted immediate
offset is assembled as zero. All offsets are in bytes.
</p>

<p>
Memory addresses must be naturally aligned, on a byte address that is a
multiple of the access size. Misaligned addresses are forced to align to
access size and can optionally raise an error. An address outside the
window or outside the allocated memory within the window sets Rd to 0
and causes an error.
</p>

<p>
When used in a pixel shader, the STL operation has helper pixels and killed
pixels automatically predicated off by the HW to prevent unwanted writes to
local memory. If the pixel's raster coverage is 0 or it has previously been
killed using the <a href="opKIL.htm">KIL</a> operation, the threads will not
participate in any STL operations.
</p>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>STL</b>.32    [R3+0x1234], R1;   // store to Local address
<b>STS</b>.64    [R3 - 16], R4;     // store [R5,R4] to 64-bit Shared location
<b>STS</b>.32    [0x12], R1;        // store R1 to absolute location 0x12 in per-CTA Shared memory

</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
