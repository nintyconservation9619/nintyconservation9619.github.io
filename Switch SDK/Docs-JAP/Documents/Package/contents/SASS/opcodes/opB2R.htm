<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>B2R</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    B2R : Move Barrier To Register<br>
    <!-- SUMMARY_TABLE_INFO { description => "Move Barrier To Register" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Miscellaneous Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "B2R", subsection => 13.1 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">
<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>B2R</b>.BAR</code>      <code>Rd, #BarNameU4</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "B2R" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>B2R</b>.WARP</code>     <code>Rd</code>               <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "B2R" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>B2R</b>.RESULT</code>   <code>Rd{, Pd}</code>         <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "B2R" } -->

   mode: { .BAR*, .WARP, .RESULT }

</pre>
</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
<b>B2R.BAR</b> and <b>B2R.WARP</b> can be used to read out in-progress barrier state for context save.  Use <b>R2B</b>
to restore barrier state.
<b>B2R.BAR</b> reads the state associated with Barrier specified by #BarNameU4 while <b>B2R.WARP</b> reads per-warp barrier state.
</p>

<p>
<b>B2R.RESULT</b> is used to read the result of <b>BAR.RED</b>, <b>BAR.ARV</b>, or <b>BAR.SCAN</b>.
</p>
<p>
<b>B2R.BAR</b> returns the barrier state BarrierState_t that contains counts associated with the given barrier.  These counts will be for those threads that 
contributed to the barrier but did not stop (<b>BAR.ARV</b>/<b>BAR.SCAN</b> as opposed to <b>BAR.SYNC</b>/<b>BAR.RED</b>).  
</p>
<p>
If the BarInUse field is 0, the rest of the values are 0.</p>
<p>
Note: Behavior when mixed with execution of target barriers in the same region is UNPREDICTABLE.</p>

<p>
<b>B2R.WARP</b> returns per warp barrier state which  includes: 
<ul>
<li> a 1-bit value indicating whether the warp is waiting on a barrier completion,  </li>
<li> a 4-bit value indicating the logical barrier the warp is waiting upon (if any),</li>
<li> a 11-bit barrier result (the same result returned by <b>B2R.RESULT</b>).   </li>
</ul>
The per-warp WaitingOnSyncAllBarrier state is not exposed.  The state written back to Rd is formatted as data structure WarpBarrierState_t.  
</p>

<p>
<b>B2R.RESULT</b> writes the previous barrier reduction result for that warp into a register and/or predicate.  <b>BAR.SYNC</b> and <b>BAR.RED</b> generate barrier results upon barrier release.  For boolean <b>.RED</b> operations, RedCntResult is 0xffff_ffff if .AND/.OR are true, and 0x0000_0000 otherwise. <b>BAR.SCAN</b> generates a barrier result upon barrier execution.  <b>BAR.ARV</b> contributes to the reduction but does not return a result.  The barrier result format is defined in the BAR instruction.  <b>B2R.RESULT</b> returns the barrier result in the following format:
</p>

<pre>
    31:0   RedCntResult
</pre>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>B2R</b>     R5, 0;                            // R5 = Barrier[0];
<b>B2R</b>     R0, 3;                            // R0 = Barrier[3];
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
