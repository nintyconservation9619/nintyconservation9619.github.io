<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>PRET/RET</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    PRET : Pre-Return From Subroutine<br>
    <!-- SUMMARY_TABLE_INFO { opcode => "PRET", description => "Pre-Return From Subroutine" } -->
    RET : Return From Subroutine<br>
    <!-- SUMMARY_TABLE_INFO { opcode => "RET", description => "Return From Subroutine" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Control Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "PRET", subsection => 10 } -->
<!-- SUMMARY_TABLE_INFO { opcode => "RET", subsection => 10 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code></code>           <code><b>PRET</b>{.NOINC}</code>   <code>#OffsetS24</code>              <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MIO_NOSCBD") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MIO_NOSCBD") --></code>           <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "PRET" } -->
<code>        <code></code>           <code><b>PRET</b>{.NOINC}</code>   <code>c[#BankU05][#AddrU16]</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MIO_NOSCBD") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MIO_NOSCBD") --></code>           <code>;</code>   <code><b>// This form is not patchable and is deprecated</b></code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "PRET" } -->

<code>        <code>{@{!}Pg}</code>   <code><b>RET</b></code>            <code>{CC.test}</code>               <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MIO_NOSCBD") -->{&amp;req_6}</code>   <code>{?sched>=?WAIT5}<!-- END &opex("MIO_NOSCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "RET" } -->



 .NOINC: push is not counted against the ApiCallLimit maximum call nesting depth.

 .test:  { <b>.F,      .LT,     .EQ,     .LE,      .GT,      .NE,      .GE,   .NUM, </b>    Signed numeric tests
           <b>.NAN,    .LTU,    .EQU,    .LEU,     .GTU,     .NEU,     .GEU,  .T,   </b>    Signed or Unordered tests 
           <b>.OFF,    .LO,     .SFF,    .LS,      .HI,      .SFT,     .HS,   .OFT, </b>    Unsigned integer tests
           <b>.CSM_TA, .CSM_TR, .CSM_MX, .FCSM_TA, .FCSM_TR, .FCSM_MX, .RLE,  .RGT  </b>}   Clip State Machine tests
</pre>
</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description</h2>
<div class="Description">

<dl>
<dt>PRET:</dt>
<dd>
<p>
Unconditional prepare-for-return.</p>
<p>
This instruction is intended to be used in conjunction with <b>BRX</b>
or <b>JMX</b> to support <i>indirect calls</i>.  <b>PRET</b> does everything
a <b>CAL</b> does, <i>except</i> the actual control transfer.
Specifically, <b>PRET</b> pushes a return address, optionally subject
to call nesting limits.</p>
<p>
<b>PRET</b> uses a relative (signed) PC target address. Target address
is in bytes, not instructions or words, and is relative to the PC of
the <i>next</i> instruction following the <b>PRET</b>.</p>
<p>
When a PRET is executed, the <b>.NOINC</b> suffix controls whether or
not it is counted towards the ApiCallLimit maximum call nesting level 
(default is to count, <b>.NOINC</b> overrides this).  If the call limit 
is exceeded, <b>PRET</b> records this call depth overflow in a special 
state bit and does <i>not</i> update the stack.</p>
<p>
A subsequent <b>BRX.LMT</b> or <b>JMX.LMT</b> should check this state bit,
which will cause the branch to be converted into a <b>NOP</b> when the bit is set.
See the <b><a href="opBRA.htm">BRX/JMX</a></b> description for details.</p>
<p>
Note that there is only one special state bit per <i>warp</i>, shared by all
threads in the warp, so it is critical that there be no warp divergence
between the <b>PRET</b> and the subsequent <b>BRX/JMX</b>.  In general,
there should be no intervening branch-type instructions between 
a <b>PRET</b> and the subsequent branch at all, which trivially satisfies
the <i>no divergence</i> requirement.</p>
</dd>
<dt>RET:</dt>
<dd>
<p>
Conditional return from subroutine.</p>
<p>
The return condition is based on a predicate AND condition code bits. To just
return on predicate, use CC.TRUE.  To return based only on CC, use PT as the
predicate.</p>
<p>
Subroutines can return from within nested control flow, including loops and if-then-elses.</p>
<p>
If the matching <b>PRET</b> or <b>CAL</b> incremented the call depth counter towards
a maximum user call depth, the <b>RET</b> will decrement the call depth counter when
it pops the return address from the stack.</p>
<p>
A <b>RET</b> on an empty stack, e.g. without a matching <b>CAL</b>,
will act like an <b>EXIT</b> and terminate the program.  This includes checking for any barriers
waiting on all threads.  See <a href="opEXIT.htm">EXIT</a> for full details.
</p>
</dd>
</dl>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
    <b>PRET</b>    MONGO;
    BRX.LMT R0;
MONGO:
    FMAD    ...

    <b>RET</b>;
    <b>RET</b> CC.LT;
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
