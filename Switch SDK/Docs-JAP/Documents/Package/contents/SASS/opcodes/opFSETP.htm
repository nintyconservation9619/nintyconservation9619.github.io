<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>FSETP</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    FSETP : FP32 Compare And Set Predicate<br>
    <!-- SUMMARY_TABLE_INFO { description => "FP32 Compare And Set Predicate" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Floating Point Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "FSETP", subsection => 0 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>FSETP</b>.cmp{.FTZ}</code>       <code>Pu,     {-}{|}Ra{|}, {-}{|}Sb{|}</code>          <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "FSETP" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>FSETP</b>.cmp{.FTZ}.bop</code>   <code>Pu, Pv, {-}{|}Ra{|}, {-}{|}Sb{|}, {!}Pp</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "FSETP" } -->

  .cmp:  { <b>.F,   .LT,  .EQ,  .LE,  .GT,  .NE,  .GE,  .NUM,</b>    FP32 numeric comparisons
           <b>.NAN, .LTU, .EQU, .LEU, .GTU, .NEU, .GEU, .T </b>  }   FP32 numeric or Unordered comparisons

 .FTZ:       Denorm inputs are flushed to sign preserving 0.0.

  .bop:  { <b>.AND, .OR, .XOR</b> }        Boolean op with predicate {!}Pp


<b>FSETP</b> allows the following source Sb:
    Sb(register)
    Sb(constant with immediate address)
    Sb(#IMM20&lt;&lt;12)
</pre>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">
	
<p>
<b>FSETP</b>.cmp.bop compares register Ra and source operand Sb with FP32
comparison operation .cmp, combines the Boolean comparison result with
predicate operand {!}Pp using the Boolean operation .bop, and sets two
predicate registers Pu and Pv to Boolean values based on the comparison.
The Boolean operation .bop may be <b>.AND</b>, <b>.OR</b>, or <b>.XOR</b>, 
corresponding to the C Boolean operations <b>&amp;</b>, <b>|</b>, and <b>^</b>.
</p>

<pre>
    Pu =  (Ra .cmp Sb)  .bop {!}Pp;     
    Pv =(!(Ra .cmp Sb)) .bop {!}Pp; 
</pre>

<p>
Use .bop {!}Pp for nested predication, with an inner comparison of Ra vs. Sb, conditioned on outer predicate Pp.</p>
<p>
The simple instruction format without .bop {!}Pp assembles as <b>.AND
	PT</b>, and Pv is PT, providing the following effective operation:</p>
<pre>
    Pu =  (Ra .cmp Sb);     // Set predicate to 1 if comparison test is true, else 0
</pre>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>FSETP.LT</b>         P1, R1, -R2;            // P1 = (R1 &lt; -R2);
<b>FSETP.GEU.FTZ</b>    P1, R1, 2.5;            // P1 = (FTZ(R1) &gt;= 2.5) || isNan(R1);
<b>FSETP.EQ</b>         P1, R1, -|c[1][0x44]|;  // P1 = (R1 == -|c[1][0x44]|);

<b>FSETP.LT.AND</b>     P1, P4, R1, R2, !P3;    // P1 = (R1 &lt; R2) &amp; !P3;  P4 = !(R1 &lt; R2) &amp; !P3;

</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
