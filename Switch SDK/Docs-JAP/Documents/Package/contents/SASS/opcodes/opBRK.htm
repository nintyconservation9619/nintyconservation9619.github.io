<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>PBK/BRK</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    BRK : Break<br>
    <!-- SUMMARY_TABLE_INFO { opcode => "BRK", description => "Break" } -->
    PBK : Pre-Break<br>
    <!-- SUMMARY_TABLE_INFO { opcode => "PBK", description => "Pre-Break" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Control Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "PBK", subsection => 11.1 } -->
<!-- SUMMARY_TABLE_INFO { opcode => "BRK", subsection => 11.1 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code></code>           <code><b>PBK</b></code>   <code>#OffsetS24</code>              <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MIO_NOSCBD") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MIO_NOSCBD") --></code>           <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "PBK" } -->
<code>        <code></code>           <code><b>PBK</b></code>   <code>c[#BankU05][#AddrU16]</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MIO_NOSCBD") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MIO_NOSCBD") --></code>           <code>;</code>   <code><b>// This form is not patchable and is deprecated</b></code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "PBK" } -->

<code>        <code>{@{!}Pg}</code>   <code><b>BRK</b></code>   <code>{CC.test}</code>               <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MIO_NOSCBD") -->{&amp;req_6}</code>   <code>{?sched>=?WAIT5}<!-- END &opex("MIO_NOSCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "BRK" } -->

 .test:  { <b>.F,      .LT,     .EQ,     .LE,      .GT,      .NE,      .GE,   .NUM, </b>    Signed numeric tests
           <b>.NAN,    .LTU,    .EQU,    .LEU,     .GTU,     .NEU,     .GEU,  .T,   </b>    Signed or Unordered tests 
           <b>.OFF,    .LO,     .SFF,    .LS,      .HI,      .SFT,     .HS,   .OFT, </b>    Unsigned integer tests
           <b>.CSM_TA, .CSM_TR, .CSM_MX, .FCSM_TA, .FCSM_TR, .FCSM_MX, .RLE,  .RGT  </b>}   Clip State Machine tests

</pre>
</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
Conditional break from a loop.</p>

<dl>
<dt>PBK:</dt>
<dd>
<p>
   Set program pre-break synchronization point.</p>
<p>
   This instruction is used before (and outside) a potentially divergent 
   <b>BRK</b> (break) located inside a loop.  It specifies the target address 
   to resume execution following the <b>BRK</b>.</p>
<p>
   The target address is relative to the program counter of the instruction 
   following the <b>PBK</b> instruction and is a signed byte address with the 
   two lsbs being 0.</p>
<p>
   The <b>PBK</b> instruction results in a token being pushed onto the 
   CallReturnStack (CRS) but does not alter the program flow, execution 
   continues normally to the next sequential instruction.</p>
</dd>
<dt>BRK:</dt>
<dd>
<p>
   The break condition is based on a predicate AND condition code bits. 
   To just break on predicate, use CC.TRUE.  To just break on CC, use PT.</p>
<p>
   When all active threads have executed a <b>BRK</b>, the stack will be
   unrolled until a matching <b>PBK</b> token is found.  The <b>PBK</b> stack entry
   will be popped from the stack, and execution will resume at the address
   specified by the <b>PBK</b>, with the active mask updated according to the 
   mask in the <b>PBK</b>.  Thus this is a synchronizing event eliminating 
   the need to bracket loop bodies with <b>SSY/.S</b> instructions if all active 
   threads eventually exit the loop via a <b>BRK</b>.  Breaks can be executed 
   within arbitrarily nested if-then-else blocks inside a loop.</p>
<p>
   A <b>BRK</b> without a matching <b>PBK</b> will result in an error.</p>
</dd>
</dl>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
// pseudo-code example
while (TRUE) {
  R4 *= 2.0f;
  if (R4 &gt;= 1024.0f)
    break;
  }

// in assembler could be:
  PBK LABEL0;

LABEL1:
  FMUL32I R4,R4,2.0f;
  FADD32I RZ.CC,R4,-1024.0f;
  BRK     CC.GE;
  BRA     LABEL1:

LABEL0:
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
