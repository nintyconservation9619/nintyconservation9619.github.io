<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>OUT</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    OUT : Output Token<br>
    <!-- SUMMARY_TABLE_INFO { description => "Output Token" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Graphics Load/Store Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "OUT", subsection => 5 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>OUT</b>.type</code>   <code>Rd,Ra,Sb</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "OUT" } -->

       .type:  { <b>.EMIT, .CUT, .EMIT_THEN_CUT, INVALID</b> } 
               .EMIT:
                   Finalizes currently emitting vertex. The vertex is sent to the stream
                   indexed by the lower two bits of Sb.
               .CUT:
                   Ends current output strip at last emitted vertex. If current output
                   primitive is incomplete (due to insufficient vertex count) the primitive
                   is discarded.
               .EMIT_THEN_CUT:
                   Finalizes currently emitting vertex, then ends current output strip.
                   If current output primitive is incomplete (due to insufficient vertex
                   count) the primitive is discarded.
       


The following source Sb is allowed:
    Sb(register)
    Sb(#IMM20)
</pre>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
Geometry shader output token. For regular geometry shader, allows completion of currently emitting vertex, and
restart of output strip. For fast geometry shader, treated as NOP.</p>
<p>
The state machine register Ra gets updated by the <b>OUT</b> instruction, and
written back to Rd. The state machine register must be initialized
to 0 by the program at the start of the geometry shader. The shader program
should not attempt to change the contents of the state machine register as
it is deemed an opaque value.  </p>
<p>
Note that if the GS register has become corrupted and an error is raised, Rd will 
<b>not</b> be updated.  This error will only occur if something other than the <b>OUT</b> 
instruction has been manipulating the state machine register and has not been doing 
it properly.</p>
<p>
<b>IMPORTANT</b>: When a regular (non-fast) GS program terminates, the SM hw will 
           auto-generate a final <b>OUT</b> instruction that will source <b>R0</b> as 
           the final state machine. This final <b>OUT</b> instruction will not emit a 
           vertex, and only exists to mark where the shader stopped writing to its declared 
           output buffer. Any GS program <b>must</b> have R0 up-to-date with the current 
           state machine whenever the thread can possibly terminate. If this is not done, GS 
           output will be corrupted/lost. It is strongly recommended that all GS programs just 
           reserve R0 as the state machine register.  If OUT encounters a corrupted 
           register, it will leave the register as is and signal an optional trap.  
           If AST encounters a corrupted state machine register, the ISBE write will be 
	       suppressed and an optional trap will be raised.  For fast geometry shaders,
           no final OUT instruction is generated and it's not necessary to keep any special
           value in R0</p>
<p>
The state machine register must be sourced by <b>AST</b> for Geometry Shaders.</p>
<p>
SM hw will prevent a bad state machine register from causing writes outside the valid ISBE boundary.</p>
<p>
Source Sb contains an index to a stream, and is only used with OUT.EMIT and OUT.EMIT_THEN_CUT.  
For OUT.CUT operations, Sb must be Rz.  Only the lower 2 bits of Sb will be used to direct the
vertex to one of the 4 streams, the upper 30 bits are ignored.  </p>
<p>
If the stream index changes between OUT.EMIT instructions, the HW will automatically insert a CUT at the 
transition point.  Even if one of the stream indices that a vertex is sent to is disabled, the change in 
stream index will still be treated like a CUT.
</p>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>OUT.EMIT</b> R0,R0,0x1;
<b>OUT.CUT</b>  R0,R0,RZ;
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">back to Index of Instructions</a></p>
</div>
</body>
</html>
