<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>F2I</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    F2I : Floating Point To Integer Conversion<br>
    <!-- SUMMARY_TABLE_INFO { description => "Floating Point To Integer Conversion" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Conversion Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "F2I", subsection => 4 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>F2I</b>{.FTZ}{.dstfmt.srcfmt}{.rnd}</code>   <code>Rd{.CC},{-}{|}Sb{.extract}{|}</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "F2I" } -->

 .FTZ:        fp32 denorm input is flushed to sign-preserving 0.0.

 .dstfmt:     { <b>.U16, .S16, .U32, .S32*, .U64, .S64</b> }
 .srcfmt:     { <b>.F16, .F32*, .F64</b>}
       ----------------------------------------
          .SRCFMT     .DSTFMT       Status
       ----------------------------------------
           .F16        .U16           OK
           .F16        .S16           OK
           .F16        .U32           OK
           .F16        .S32           OK
           .F16        .U64        <b>Illegal</b>
           .F16        .S64        <b>Illegal</b>     
       ----------------------------------------
           .F32        .U16           OK
           .F32        .S16           OK
           .F32        .U32           OK
           .F32        .S32           OK
           .F32        .U64           OK
           .F32        .S64           OK
       ----------------------------------------
           .F64        .U16        <b>Illegal</b>
           .F64        .S16        <b>Illegal</b>
           .F64        .U32           OK
           .F64        .S32           OK
           .F64        .U64           OK
           .F64        .S64           OK
       ----------------------------------------

 .rnd:        { <b>.ROUND*, .FLOOR, .CEIL, .TRUNC</b> } 

 .CC:         Write condition codes

 .extract:    {.H0,.H1}
              .F16 extraction from bottom(H0) or top(H1) 16b.
              Only legal if srcfmt==.F16

The following source Sb combinations are allowed for FP16 input:
    Sb(register)
    Sb(constant with immediate address)
    Sb(((#Imm20 &amp; 0x0000_ffff)&lt;&lt;16) | (#Imm20 &amp; 0x0000_ffff))

The following source Sb combinations are allowed for FP32 input:
    Sb(register)
    Sb(constant with immediate address)
    Sb(#IMM20&lt;&lt;12)

The following source Sb combinations are allowed for FP64 input:
    Sb(even aligned register)
    Sb(64-bit constant with immediate address -- 
       Upper 32-bits are taken from constant, lower 3 address bits must be 0x4, 
       Lower 32 bits of Sb are always 0)
    Sb(#IMM20&lt;&lt;44)
</pre>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">
<p>
The contents of source are moved into destination with optional conversions.</p>
<p>
If the source is .F16 or .F64 or if the destination is .U64 or .S64, .FTZ is ignored. </p>
<p>
If destination is .S64 or .U64 format, Rd must be a properly aligned register.</p>
<pre>
  .F16 is 1.5.10 format              // denorms are supported/don't-care in all APIs
  .F32 is 1.8.23 format              // denorms NOT supported in DirectX
  .F64 is 1.11.52 format             // denorms are supported/don't-care in all APIs
</pre>
<p>
The following steps are done:</p>
<ul><li>Optional absolute value and/or negate of source. If both are
    specified, the abs is done first.</li>
    <li>Rounding modes (.RND):
<pre>
      0: .ROUND - Integer Round to nearest even            // round
      1: .FLOOR - Integer Round towards -Infinity          // floor
      2: .CEIL  - Integer Round towards +Infinity          // ceiling
      3: .TRUNC - Integer Round towards 0                  // truncate
</pre></li>
    <li>(3) There are 6 output options. A saturate (clamp) is done.
<pre>
      1: to u16 output    // clamp(0x0000_0000, 0x0000_FFFF)
      2: to s16 output    // clamp(0xFFFF_8000, 0x0000_7FFF)
      3: to u32 output    // clamp(0x0000_0000, 0xFFFF_FFFF)
      4: to s32 output    // clamp(0x8000_0000, 0x7FFF_FFFF)
      5: to u64 output    // clamp(0x0000_0000_0000_0000, 0xFFFF_FFFF_FFFF_FFFF)
      6: to s64 output    // clamp(0x8000_0000_0000_0000, 0x7FFF_FFFF_FFFF_FFFF)
</pre></li>
</ul>

</div>

<!-- ############################### -->
<!-- # Additional Information      # -->
<!-- ############################### -->
<h2>Additional Information:</h2>
<div class="AdditionalInformation">

<!-- ############################### -->
<!-- # NaN treatment               # -->
<!-- ############################### -->
<h3>NaN treatment</h3>

<pre>
If the source is NaN, following rule is applied.
  
   If(srcfmt != F64 and dstfmt != U64 and dstfmt != S64 ) {
      Rd = 0;
   } else { // srcfmt==F64 or dstfmt==U64 or dstfmt==S64
      if(dstfmt == U32 or S32) {
         Rd = 32h8000_0000;
      } else { // dstfmt == U64 or S64
         Rd = 64h8000_0000_0000_0000;
      }
   }
</pre>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>F2I.U32.F32.ROUND</b> R0,R1;
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
