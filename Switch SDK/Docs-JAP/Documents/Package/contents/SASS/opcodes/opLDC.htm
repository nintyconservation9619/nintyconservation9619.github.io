<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>LDC</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    LDC : Load Constant<br>
    <!-- SUMMARY_TABLE_INFO { description => "Load Constant" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Compute Load/Store Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "LDC", subsection => 5 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>LDC</b>{.sz}</code>        <code>Rd, c[#ImmU05][#ImmU16]</code>      <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "LDC" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>LDC</b>{.sz}{.ad}</code>   <code>Rd, c[#ImmU05][Ra+#ImmS16]</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "LDC" } -->

 .sz:     { <b>.U8, .S8, .U16, .S16, .32*, .64, .INVALID</b> } 
 .ad:     { <b>.IA*, .IL, .IS, .ISL</b> } 
</pre>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description</h2>
<div class="Description">

<p>
Move constant (which might be indexed) into destination. This is a bit-wise
move. <b>LDC</b> always uses the indexed C$, not the immediate C$,
and supports 8-bit to 128-bit loads.</p>
<p>
If Ra is not specified or Ra is RZ, the address is an <b>unsigned</b> 16-bit
immediate. If Ra is specified and is not RZ, the address is the sum of register
Ra and an 16b <b>signed</b> immediate.</p>
<p>
Source Ra is unsigned and in bytes, immediate is in bytes.</p>
<p>
The constant bank is given by #ImmU05. There are a maximum of 32
constant banks of size 64 KB each. Out of bounds addresses result in 0s being
written back.
</p>
<p>
The address calculation math wraps silently at 32-bits.
The hardware supports up to 18 banks (8 in Compute), and 
will return 0 for unsupported banks.
</p>

<p>
There are three address behaviours for LDC with an indexed address:</p>
<pre>
  <b>00: IA</b>                                 <span style="color: green">// DX10 Mode, Default</span>
      bank = #ImmU05;
      addr = Ra + #ImmS16;

  <b>01: IL</b>                                 <span style="color: green">// Linear Address Mode</span>
      bank = #ImmU05 + ((Ra + #ImmS16) &gt;&gt; 16);
      addr = (Ra + #ImmS16) &amp; 0xffff;

  <b>10: IS</b>                                 <span style="color: green">// Segmented Address</span>
      bank = #ImmU05 + (Ra &gt;&gt; 16);
      addr = #ImmS16 + (Ra &amp; 0xffff);

  <b>11: ISL</b>                                <span style="color: green">// DX11 Mode (Segmented Address with bounds checking)</span>
      bank = #ImmU05 + (Ra &gt;&gt; 16);
      addr = #ImmS16 + (Ra &amp; 0xffff);
      if(bank &gt; 13)                      <span style="color: green">// 14 banks are allowed for DX indexing, others are reserved</span>
         result = 0;
</pre>

<p>
The suffix .sz specifies the size in bits to load from memory.  Sizes
require register destination alignment and address alignment.</p>
<p>
Misaligned addresses/register will result in an error.</p>

<!-- ############################### -->
<!-- # Additional Information      # -->
<!-- ############################### -->
<h2>Additional Information:</h2>
<div class="AdditionalInformation">

<p>
Only 8 constant banks are accessible in Compute mode. When attempting to
access bank 8 or higher the hardware provides no additional
bounds-checking (aside from the the 14-bank limit of <b>LDC.IS</b>)
and results are unpredictable.
For DirectCompute, the driver must emulate support for the upper banks and
provide bounds-checking in software.</p>
</div>


</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>LDC</b>.32.IA  R2,c[0][R1 + 0x404];

<b>LDC</b>.64     R4,c[7][0x400];
<b>LDC</b>.64     R6,c[7][0x408];
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
