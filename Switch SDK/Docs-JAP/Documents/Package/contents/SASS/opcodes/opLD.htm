<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>LD</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    LD : Load from generic Memory<br>
    <!-- SUMMARY_TABLE_INFO { description => "Load from generic Memory" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Compute Load/Store Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "LD", subsection => 5 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>LD</b>{<b>.E</b>}{.cop}{.sz}</code>   <code>Rd, [Ra + ImmS32] {, Plg}</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   <code>// Load</code>                                        </code><!-- SUMMARY_TABLE_INFO { define_opcode => "LD" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>LD</b>{<b>.E</b>}{.cop}{.sz}</code>   <code>Rd, [ImmU32]      {, Plg}</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   <code>// Load from absolute address by omitting Ra</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "LD" } -->

 .E       Extended address (64 bits, requires two registers)

 .cop:  { <b>.CA*, .CG, .CS, .LU, .CV , .CI</b>}    // Cache all*, global, streaming, last-use, volatile, inconsistent
          <b>.CA</b>*   Cache at all levels, likely to be accessed again (default).
          <b>.CG</b>    Cache at global level (cache in L2 and below, not L1).
          <b>.CS</b>    .CS maps to .CA.
          <b>.LU</b>    .LU maps to .CG.
          <b>.CV</b>    Cache as volatile (consider cached system memory lines stale, fetch again).
          <b>.CI</b>    Cache as inconsistent data (expected to be used only with invariant data).

 .sz:     { <b>.U8, .S8, .U16, .S16, .32*, .64, .128, .U.128 </b> }  Bit size in memory, unsigned or sign-extended

</pre>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description</h2>
<div class="Description">

<p>
<b>LD</b> loads register Rd from memory at a generic thread address specified
as [Ra + ImmS32] or as [ImmU32]. 
</p>

<p>
If register Ra is omitted, equal to <tt>RZ</tt>, or beyond the set of
registers supported for the shader, the effective address is the
zero-extended absolute <b>unsigned</b> immediate offset.
An omitted <tt>Ra</tt> register is assembled as <tt>RZ</tt>.
Otherwise, the effective address is equal to the sum of register Ra
(or <tt>{Ra+1, Ra}</tt> when .E is specified), and the signed-extended
<b>signed</b> immediate offset. A negative offset is written as
<tt>[Ra - offset]</tt> or <tt>[Ra + -offset]</tt>. An omitted immediate
offset is assembled as zero. All offsets are in bytes.
</p>

<p>
The generic thread address space can access Global, Local or Shared memory
<tt>Plg</tt> is optional predicate indicating which thread addresses map to
local or global address spaces. If not specified, Plg is assumed to be
<tt>PT</tt> (true predicate), i.e. local or global memory.
</p>

<p>
<b>.sz = .U.128</b> (Uniform 128 bit load) can be used to provide a
performance hint to the hardware that the access will likely be a uniform
address for all threads. Before using it, please see the performance section
of the programming guide for detail on how and when to use it.
</p>

<p>
Memory addresses must be naturally aligned, on a byte address that is a
multiple of the access size. Misaligned addresses are forced to align to
access size and can optionally raise an error. An address outside the
window or outside the allocated memory within the window sets Rd to 0
and causes an error.
</p>

</div>


<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
    LD.32       R3, [R1 + 20], P0;    // load 32 bits into R3 from 20 bytes offset from byte address in R1, P0 controls global/local vs shared
    LD.E        R0, [R2 + 0x1234];    // load 32 bits into R0 from 40-bit extended address in {R2, R3} plus offset 0x1234
    LD.U.128    R4, [R1], P1;         // load 128 bits into R4, R5, R6, R7 from byte address in R1 using uniform broadcast vector path

</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
