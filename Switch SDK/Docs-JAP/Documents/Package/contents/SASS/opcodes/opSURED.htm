
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>SURED</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    SURED : Atomic Reduction on surface memory<br>
    <!-- SUMMARY_TABLE_INFO { description => "Atomic Reduction on surface memory" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Compute Load/Store Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "SURED", subsection => 9.1 } -->

<!-- ############################### -->
<!-- # Format           # -->
<!-- ############################### -->
<h2>Format</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>SURED</b>.D{.BA}.dim.op{.sz}{.clamp}</code>   <code>[Ra], Rb, #tsPtrIdxU13</code>   <code><!-- OPEX_COUNT_3 --><!-- BEGIN &opex("MIO_RD_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "SURED" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>SURED</b>.D{.BA}.dim.op{.sz}{.clamp}</code>   <code>[Ra], Rb, Rc</code>             <code><!-- OPEX_COUNT_3 --><!-- BEGIN &opex("MIO_RD_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "SURED" } -->

        .dim    {<b>.1D, .1D_BUFFER, .1D_ARRAY, .2D, .2D_ARRAY, .3D</b>}

        .mode   {<b>.D</b>} 
            .D      This mode specifies load from surface as raw data of size .sz, without any format conversion.
                    In this mode, if .BA (ByteAddress) is specified, 
                         the x-coordinate is assumed to be in bytes, aligned on a .sz boundary. 
                         Otherwise, x-ordinate is treated as sample co-ordinate and scaled by .sz in hardware.

        .op     {<b>.ADD, .MIN, .MAX, .INC, .DEC, .AND, .OR, .XOR</b>}
        .sz     {<b>.U32*, .S32, .U64, .S64, .F32.FTZ.RN, .F16x2.FTZ.RN, .SD32, .SD64</b>}
        .BA     x-coordinate is specified as byte-address. (in .D mode)
        .clamp  {<b>.IGN, .NEAR*, .TRAP</b>}

                                  
    Operands
    ------------------------------------
    Ra             Coordinates 
    Rb             Reduction operand.  
    #tsPtrIdxU13   This immediate index (word address) is used to fetch the packed header+sampler pointer entry from constant cache.  The bank from which
                   it is fetched  is determined by bundle state. The constant bank entry is 32 bit structure of the form
                   "samplerPtr[31:20] | headerPtr[19:0]". (Surface instructions ignore sample pointers).
                   Any header pointer greater than one specified in SetTexHeaderPoolC.MaximumIndex  will be regarded as an "invalid" texture.
    Rc             In bindless mode, Rc register is used to pass the "samplerPtr[31:20] | headerPtr[19:0]". 
                   Note: Ra/Rc cannot be RZ register.


    -------------------------------------------------------------------------<b>
                            Reduction Operations
    .op    .sz                                            Description,  M is [Ra]           </b>
    -------------------------------------------------------------------------
    .ADD   .U32 .S32 .SD32 .U64 .F32.FTZ.RN .F16x2.RN      M = M + Rb;
    .MIN   .U32 .S32 .SD32 .U64 .S64 .SD64  .F16x2.RN      M = min(M, Rb);
    .MAX   .U32 .S32 .SD32 .U64 .S64 .SD64  .F16x2.RN      M = max(M, Rb);
    .INC   .U32                                            M = (M &gt;= Rb)? 0 : (M + 1);
    .DEC   .U32                                            M = (M == 0 || M &gt; Rb)? Rb : M - 1;
    .AND   .U32 .S32 .SD32 .U64                            M = M &amp; Rb;
    .OR    .U32 .S32 .SD32 .U64                            M = M | Rb;
    .XOR   .U32 .S32 .SD32 .U64                            M = M ^ Rb;
    -------------------------------------------------------------------------


</pre>

</div>

<!-- ############################### -->
<!-- # Description         # -->
<!-- ############################### -->
<h2>Description</h2>
<div class="Description">

<p>
<b>SURED</b> performs an reduction on pitch or blocklinear surfaces in global memory.
</p>
<p>
Register <B>Ra</B> specifies surface coordinates. The number of coordinates depends upon surface dimension. 
<B>Ra</B> must follow register alignment rules for given number of coordinates.
</p>
<TABLE border="1" cellpadding="10%">
<CAPTION><EM>Surface Coordinate packing in Ra</EM></CAPTION>
<TR>
    <th> .dim </th>
    <th> Ra </th>
    <th> Ra+1 </th>
    <th> Ra+2 </th>
</TR>
<TR>
    <TD> 1D </TD>
    <TD> S32 </TD>
    <TD>  </TD>
    <TD>  </TD>
</TR>
<TR>
    <TD> 1D_BUFFER </TD>
    <TD> S32/U32 </TD>
    <TD>  </TD>
    <TD>  </TD>
</TR>
<TR>
    <TD> 1D_ARRAY </TD>
    <TD> S32 </TD>
    <TD> U16 </TD>
    <TD>  </TD>
</TR>
<TR>
    <TD> 2D </TD>
    <TD> S32 </TD>
    <TD> S32 </TD>
    <TD>  </TD>
</TR>
<TR>
    <TD> 2D_ARRAY </TD>
    <TD> S32 </TD>
    <TD> S32 </TD>
    <TD> U16 </TD>
</TR>
<TR>
    <TD> 3D </TD>
    <TD> S32 </TD>
    <TD> S32 </TD>
    <TD> S32 </TD>
</TR>
</TABLE>           
<p>
For 1D_BUFFER, the coordinate is S32 if .clamp is .NEAR. Otherwise, the coordinate is interpreted as U32.  
The 1D_ARRAY and 2D_ARRAY array indices are treated as U16, meaning only the 16 LSBs of the register value are used.
</p>

<p>
The .clamp field specifies how to clamp out of bounds addresses (too high or low).
<ul>
  <li>.IGN stores to nearest edge sample (ignores the clamping status).</li>
  <li>.NEAR indicates that an out-of-bounds address will clamp to the nearest surface boundary</li>
    <li>.TRAP indicates that an out-of-bounds address causes an execution trap. If coordinates exceed bounds, the memory access is treated like an .IGN.</li>
</ul>
</p>


<p>
<B>Sc</B> contains a pointer to texture header. The possible options for Sc are:
<ul>
   <li> Rc: stored in 32-bit register. (Rc cannot be RZ)</li>
 <li> Constant with Immediate address, #tsPtrIdxU13: { const[15:2], 2'b00 } </li>
</ul>
</p>

<p>
Size specifier for byte (.D.BA) and coordinate (.D) addressing.
<ul>
  <li> .sz is one of: <br> 
	.U32, .S32, .U64, .S64, .F32.FTZ.RN, .F16x2.FTZ.RN,.SD32, and .SD64 <br>
  </li>
<ul>
                   <li> .SD32 implies  either U32 or S32 (based on surface header) </li>
                   <li> .SD64 implies  either U64 or S64 (based on surface header) </li>
</ul>
  <li> .sz Indicates the amount of memory to store from register(s) Rb, Rb+1 (as needed). </li>
</ul>
</p>

<p>
All surface operations are uncached at L1 level, regardless of .cop. 
Within the L1 cache, surface operations to the same coordinates as cached Texture operations will not invalidate cached data lines.
</p>

<p>
If the surface being accessed is disabled, the update  will be silently dropped.
</p>

<p>
When used in a pixel shader by helper pixels or killed pixels, SURED automatically turned into NOP for that thread.
This is to prevent unwanted writes to global memory by pixels with zero raster coverage or by pixels that have been 
using the KIL operation. These the threads will not participate in any SURED operations.
</p>

</div>

<!-- ############################### -->
<!-- # Examples          # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>SURED.D.2D.ADD.U32</b> [R2], R4, R6; # surface header in R6

</pre>
</div>

<!-- ############################### -->
<!-- # Tail            # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
