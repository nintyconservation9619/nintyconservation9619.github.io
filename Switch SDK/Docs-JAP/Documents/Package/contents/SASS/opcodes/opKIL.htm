<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>KIL</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    KIL : Kill Thread<br>
    <!-- SUMMARY_TABLE_INFO { description => "Kill Thread" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Control Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "KIL", subsection => 12 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>KIL</b></code>   <code>{CC.test}</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MIO_NOSCBD") -->{&amp;req_6}</code>   <code>{?sched>=?WAIT5}<!-- END &opex("MIO_NOSCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "KIL" } -->

 .test:  { <b>.F,      .LT,     .EQ,     .LE,      .GT,      .NE,      .GE,   .NUM, </b>    Signed numeric tests
           <b>.NAN,    .LTU,    .EQU,    .LEU,     .GTU,     .NEU,     .GEU,  .T,   </b>    Signed or Unordered tests 
           <b>.OFF,    .LO,     .SFF,    .LS,      .HI,      .SFT,     .HS,   .OFT, </b>    Unsigned integer tests
           <b>.CSM_TA, .CSM_TR, .CSM_MX, .FCSM_TA, .FCSM_TR, .FCSM_MX, .RLE,  .RGT  </b>}   Clip State Machine tests

</pre>
</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
Kill the pixel shader program.  If KIL condition is TRUE for thread, final color and Z output is suppressed.</p>
<p>
Killed threads may continue execution on the processor to provide fully covered
quads, even though their final pixel output will be ignored.  This can be significant
if killed threads perform conditional branches or memory operations that affect the
performance or correctness of other non-killed threads.</p>
<p>
Killed threads are prevented from executing <a href="opST.htm">ST</a> instructions.  Once a thread has been killed, 
it is no longer allowed to write global memory.  However, the HW takes no action to rollback 
previous global stores (so a thread that is eventually killed could impact the final images 
before the KIL instruction is executed).  Care should be taken by the compiler's optimizer 
when relocating KIL instructions</p>

<h4>Zombie Optimization:</h4>
<p>
While threads that have been killed often have to continue running to participate in texture LOD 
calculations on a quad-thread basis, there is no other reason to keep them active (since they 
cannot otherwise change the outputs of a pixel shader).  To take advantage of this fact, HW 
employs a zombie-optimization.  This optimization watches for threads that have been killed 
but are still running (creatively named zombie-threads).  If it notices an entire quad of threads 
in this state, it will move them into an exited state (to stop them running).</p>
<p>
This optimization could save some lane power, and also might allow the warp to exit earlier or 
spend less time in divergent code paths that killed threads are trying to execute.  This means 
that if the zombie optimization is enabled, the <b>KIL</b> instruction can trigger a stack-unwind.  When
used inside the trap handler, the zombie-optimization is disabled.   Entire quads that are cleared will
not be placed in the exit state until a <b>KIL</b> instruction in normal user code is executed.</p>
<p>
<b>Note:</b> When some threads in a quad have executed <b>KIL</b> while all remaining threads in the quad
have already finished through <a href="opEXIT.htm">EXIT</a>, the zombie optimization may still apply. This
corner case affects virtually no real applications.</p>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>KIL</b> CC.LT;
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
