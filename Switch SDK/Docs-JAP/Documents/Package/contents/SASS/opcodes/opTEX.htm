<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>TEX</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    TEX : Texture Fetch<br>
    <!-- SUMMARY_TABLE_INFO { description => "Texture Fetch" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Texture Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "TEX", subsection => 4 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>TEX</b>{.B}{.lod}{.AOFFI}{.DC}{.NDV}{.NODEP}{.phase}</code>        <code>Rd, Ra{, Rb}, #tsPtrIdxU13, #paramA{, #wmskU04}</code>             <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "TEX" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>TEX</b>{.B}{.lod}{.AOFFI}{.DC}{.NDV}{.NODEP}{.phase}</code>        <code>Rd, Ra{, Rb}, #tidU08, #smpU05, #paramA{, #wmskU04}</code>         <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "TEX" } -->

2 additional forms support for tiled resources (sparse status predicate and LOD clamping).
<code>        <code>{@{!}Pg}</code>   <code><b>TEX</b>{.B}{.lod}{.LC}{.AOFFI}{.DC}{.NDV}{.NODEP}{.phase}</code>   <code>{Ps,} Rd, Ra{, Rb}, #tsPtrIdxU13, #paramA{, #wmskU04}</code>       <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "TEX" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>TEX</b>{.B}{.lod}{.LC}{.AOFFI}{.DC}{.NDV}{.NODEP}{.phase}</code>   <code>{Ps,} Rd, Ra{, Rb}, #tidU08, #smpU05, #paramA{, #wmskU04}</code>   <code><!-- OPEX_COUNT_4 --><!-- BEGIN &opex("MIO_RD_WR_SCBD") -->{&amp;req_6}</code>   <code>{&amp;rdN}</code>   <code>{&amp;wrN}</code>   <code>{?sched}<!-- END &opex("MIO_RD_WR_SCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "TEX" } -->

.B:      Bindless mode, where the texture header pointer and sampler pointer is packed into a 32 bit register as:
         samplerPtr[31:20] | headerPtr[19:0]
         Data is sent via register Rb.

.lod:    { <b>.LZ, .LB, .LL, .LBA, .LLA</b> } 
         Level of detail (LOD) adjust mode.
            &lt; NONE &gt;
            .LZ  - LOD level 0 (finest)       // no register required
            .LB  - LOD bias discrete          // 1 fp32 register required
            .LL  - LOD absolute discrete      // 1 fp32 register required
            .LBA - LOD bias averaged          // 1 fp32 register required (Tesla legacy mode)
            .LLA - LOD absolute averaged      // 1 fp32 register required (Tesla legacy mode)
         The "averaged" options allow the TEX pipe to average the LOD's across the quad as a performance optimization.
	 LOD Level 0 actually selects the level set by textureHeader.resViewMinMapLevel.

.LC:  LOD Clamp value for Sparse Textures.
               A 12 bit (fixed point u4.8 format) value. Packed with the ARRAY index in the same register.

.AOFFI: Programmable Texture Offset.
            _aoffimmi(u,v,w)  [DX10]   // 1 register required
                ((w &amp; 0xf)&lt;&lt;8) | ((v &amp; 0xf)&lt;&lt;4) | (u &amp; 0xf)
            Each 4b field is a 2's complement integer from -8 to +7.
            AOFFI is not supported with CubeMap textures.

.DC:     Depth comparison filter mode using reference value.
            RefVal                           // 1 fp32 register required
            Depth Comparison filter is not supported by 3D textures.
            For TEX and TEX.LZ, the .DC option will force a depth comparison filter mode regardless of the sampler state.
            For TEX.LB, TEX.LL, TEX.LBA, TEX.LLA, if the sampler state does not enable depth comparison the .DC option 
	    will not force a depth comparison filter mode.

.NDV:    Forces the TEX to be considered non-divergent even though quad may be divergent.  
            This will not promote inactive threads, only force it to be treated as non-divergent despite the fact
            that some threads might be inactive.  To activate disabled threads in a quad <a href="opSAM.htm">SAM</a> must be used.
	    Only the active mask and shader type are used to determine if a quad of threads is divergent.

.NODEP:  Indicates that there are no subsequent quad derivatives to be calculated.
	 Threads that have been "<a href="opKIL.htm">killed</a>" will be disabled to stop unnecessary texture fetches.

.phase:  { <b>.T, .P</b> }
         Allows control on the current warps texture hash, used for scheduling.
             &lt; NONE &gt;
             .T - postfix increment of the 3 bit texture component of the hash.
	     .P - postfix increment of the 5 bit phase component, and zero out the 3 bit texture component of the hash. 


#tsPtrIdxU13:
         This immediate index (word address) is used to fetch the packed header+sampler pointer entry from constant cache.  The bank from which
         it is fetched  is determined by bundle state. The constant bank entry is 32 bit structure of the form
         "samplerPtr[31:20] | headerPtr[19:0]"
         Note: Ignored if .B option is used.
         In SetSamplerBinding.ViaHeaderBinding (i.e. OGL) mode, the headerPtr  would be used as the samplerPtr as well.
         Any header pointer greater than one specified in SetTexHeaderPoolC.MaximumIndex  will be regarded as an "invalid"
         texture (i.e. equivalent to BIND_GROUP_TEXTURE_HEADER_VALID_FALSE in Fermi). 
         Any sampler pointer greater than one specified in SetSamplerHeaderPoolC.MaximumIndex  will be regarded as an "invalid"
         texture (i.e. equivalent to BIND_GROUP_TEXTURE_HEADER_VALID_FALSE in fermi).

#tidU08, #smpU05:
         This is the Fermi-compatible specification of tsPtrIdxU13 which allows running of legacy apps/traces where SASS will
	 transform these into tsPtrIdxU13 as follows:
	 #tsPtrIdxU13 = {#smpU05, #tidU08}

</pre>

<pre>
#paramA: source coordinate description.
</pre>
<div style="margin-left: 2em; font-size:100%">
<TABLE border="1" cellpadding="5%">
    <CAPTION><EM>Valid paramA specifiers for TEX </EM></CAPTION>
    <TR><TH>parameter<TH>Coordinate Registers implied</TR>
     <TR><TD> 1D</TD><TD>s</TD></TR>
     <TR><TD> 2D</TD><TD>s,t</TD></TR>
     <TR><TD> 3D</TD><TD>s,t,r</TD></TR>
     <TR><TD> CUBE</TD><TD>s,t,r</TD></TR>
     <TR><TD> ARRAY_1D</TD><TD>a,s</TD></TR>
     <TR><TD> ARRAY_2D</TD><TD>a,s,t</TD></TR>
     <TR><TD> RESERVED</TD><TD>// for ARRAY_3D</TD></TR>
     <TR><TD> ARRAY_CUBE</TD><TD>a,s,t,r</TD></TR>
</TABLE>
</div>
<pre>
           s,t,r are fp32, 
           a is U16 integer
</pre>

<pre>

#wmskU04: destination write mask (decimated contiguous writes)
         Allows for write masking the returning data writes via a bit enable
         for each of R,G,B,A. A four-vector is always returned from TEX.
         #wmskU04 defaults to 0xf.

Ps:
         Predicate returning sparse tile status. Indicate that the surface access is happening to a page marked as sparse (valid, not mapped).

</pre>
</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description</h2>
<div class="Description">

<p>
Texture fetch using a texture coordinates/parameters stored in registers Ra,Rb. The assignment of parameters is as follows:
</p>

<p>
<ol>
<TABLE border="1" cellpadding="5%">
    <CAPTION><EM>Texture parameter packing in Ra and Rb </EM></CAPTION>
<TR>
    <th> Reg </th>
    <th> parameter<BR> </th>
    <th> format </th>
</TR>
<TR>
    <TD> Ra+0 </TD>
    <TD> (.LC) : {LodClamp[27:16] | array[15:0]} </TD>
    <TD> {fixed point u4.8|u16} </TD>
</TR>
<TR>
    <TD>  </TD>
    <TD> !(.LC) :                    array[15:0]  </TD>
    <TD> u32  </TD>
</TR>
<TR>
    <TD> Ra+1 </TD>
    <TD> s </TD>
    <TD> fp32 </TD>
</TR>
<TR>
    <TD> Ra+2 </TD>
    <TD> t </TD>
    <TD> fp32 </TD>
</TR>
<TR>
    <TD> Ra+3 </TD>
    <TD> r </TD>
    <TD> fp32 </TD>
</TR>
<TR>
    <TD> Rb+0 </TD>
    <TD> SamplerPtr|HeaderPtr </TD>
    <TD> u32  </TD>
</TR>
<TR>
    <TD> Rb+1 </TD>
    <TD> LOD </TD>
    <TD> fp32 </TD>
</TR>
<TR>
    <TD> Rb+2 </TD>
    <TD> toff[11:0] </TD>
    <TD> u32  </TD>
</TR>
<TR>
    <TD> Rb+3 </TD>
    <TD> DC </TD>
    <TD> fp32 </TD>
</TR>
</TABLE>

<br> In the table above,  "+0/1/2/3" represents the order of packing parameters in Ra/Rb. If a parameter is not specified, then the rest are compacted upwards <em>within</em> the same Ra or Rb register.
<p>
The texture parameter source registers Ra/Rb and the destination (result) register Rd
have alignment restrictions based on the number of scalar registers being read/written. Specifically, 
<ol> 
	<li> Rd should be aligned to number of valid components being returned (as specified by wmask) </li>
	<li> Ra/Rb should always be aligned to </li>
	<ol style="list-style-type : lower-alpha">
		<li> 1 (scalar register) if the scalar count for that register (Ra or Rb) is 1 </li>
		<li> 2 (vec2 register)   if the scalar count for that register (Ra or Rb) is 2 </li>
		<li> 4 (vec4 register)   if the scalar count for that register (Ra or Rb) is 3 or 4 </li>
	</ol>
    <li> Rb should be specified as RZ if no parameters need to be packed in Rb. (However no error is generated if non-RZ register is specified)</li>
	<li> Ra/Rb must not be specified as RZ if any parameters need to be packed in Ra/Rb.</li>
</ol>
</p>
<p>
Some input texture values will be sanitized before being used, 
see <a href="#TextureInputCoordinateSanitation">Additional Information</a> 
for more details.</p>
</div>

<!-- ############################### -->
<!-- # Additional Information      # -->
<!-- ############################### -->
<h2>Additional Information:</h2>
<div class="AdditionalInformation">

<p>
TEX corresponds to these DX ops:</p>
<pre>
   sample    =  TEX                    // 
   sample_d  =  TXD/sw emulated        // emulate this via SAM/SWZ/TEX/RAM
   sample_b  =  TEX.LB                 // lod bias supplied
   sample_l  =  TEX.LL                 // lod      supplied
   sample_c  =  TEX.DC                 // depth comparison filter with reference value
   sample_lz =  TEX.LZ                 // lod level 0 (finest)
</pre>


<h4><a name="TextureInputCoordinateSanitation" />Sanitation of Texture Input Coordinates:</h4>
<p>
Texture input coordinates go through a sanitation step before being used in texture calculations.  </p>
  <ul><li>+Infinity will be clamped to max float</li>
  <li>-Infinity will be clamped to min float</li>
  <li>NaN will be driven to zero</li>
  </ul>

<h4>Notes On Status Bits Sent To Texture Pipe:</h4>
<pre>
Definitions:
------------
   ORM = original raster mask (pixel is active if at least one sample in pixel is covered)
   PRM = promoted raster mask (quad is active if at least one sample in quad is covered)
   CTM = current thread mask
   IPM = instruction predicate mask
   KTM = Killed Thread mask
 
   At thread launch:
     CTM is set to  PRM
     KTM is set to ~ORM

   Note: Entire quads are disabled once all 4 pixels are disabled.
 
Operation for Tex ops:
----------------------
 
Texture pipe sees 5 bits of status per quad:
    activemask[4]: one bit per pixel, allows cache and filter perf optimization
    divergent[1]:  quad divergence, impacts LOD calculation
 
  NonDependent:
    TEX.NODEP - activemask[4] = ~KTM &amp; IPM &amp; CTM
                divergent[1]  = div(CTM,PS,.NDV)        // quad divergence
 
  Dependent:
    TEX       - activemask[4] = IPM &amp; CTM               // Don't consider KTM or PRM
                divergent[1]  = div(CTM,PS,.NDV)        // quad divergence

  // Return 1 if quad is divergent, 0 if quad is not divergent
  div(CTM,PS,.NDV)
  {
    if (.NDV)
      return(0);
    if (!PS)
      return(1);
    if (CTM == 0xf)
      return(0);
    return(1);
  }
</pre>
<p>
Only pixel threads can use the TEX pipe to calculate LOD. Other thread types are automatically
divergent, which forces LOD calculation (if required) to a default value (either 0 or +Inf).</p>
<p>
If .NDV is set, it overrides the previous comment (for all thread types).</p>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
TEX        R0,R2,5,2D,0xf;             // no need for Rb
TEX.LB     R0,R2,R4,5,2D,0xf;
TEX.B.DC   R4,R0,R8,5,1D,0xf;
</pre>

</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
