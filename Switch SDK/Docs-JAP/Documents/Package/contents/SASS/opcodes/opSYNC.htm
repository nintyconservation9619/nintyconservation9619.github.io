<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>SYNC</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    SYNC : Converge threads after conditional branch<br>
    <!-- SUMMARY_TABLE_INFO { description => "Converge threads after conditional branch" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Control Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "SYNC", subsection => 9.1 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format:</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>SYNC</b></code>   <code>{CC.test}</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MIO_NOSCBD") -->{&amp;req_6}</code>   <code>{?sched>=?WAIT5}<!-- END &opex("MIO_NOSCBD") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "SYNC" } -->

 .test:  { <b>.F,      .LT,     .EQ,     .LE,      .GT,      .NE,      .GE,   .NUM, </b>    Signed numeric tests
           <b>.NAN,    .LTU,    .EQU,    .LEU,     .GTU,     .NEU,     .GEU,  .T,   </b>    Signed or Unordered tests 
           <b>.OFF,    .LO,     .SFF,    .LS,      .HI,      .SFT,     .HS,   .OFT, </b>    Unsigned integer tests
           <b>.CSM_TA, .CSM_TR, .CSM_MX, .FCSM_TA, .FCSM_TR, .FCSM_MX, .RLE,  .RGT  </b>}   Clip State Machine tests

</pre>
</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description:</h2>
<div class="Description">

<p>
This instruction is used to mark the end of each code path (the "if" and "else" paths).
This instruction searches the stack to find any CRS_TYPE_DIV tokens on the stack before the CRS_TYPE_SSY,
and executes through those divergent paths for those corresponding threads and active masks.
When the CRS_TYPE_SSY is finally found, it restores the active mask that SSY pushed and continues from the target of the SSY instruction.
From the view of any one thread, execution goes from the SYNC instruction to the SSY target instruction.
</p>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">

<pre>
<b>SYNC;</b>
</pre>

</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">back to Index of Instructions</a></p>
</div>
</body>
</html>
