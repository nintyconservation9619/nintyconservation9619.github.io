<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>VSETP</title>
<link rel="StyleSheet" href="../style.css" type="text/css" title="general">
</head>
<body class="opcode">

<!-- ############################### -->
<!-- # Opcode                      # -->
<!-- ############################### -->
<h1>
    VSETP : Integer Byte/Short Compare And Set Predicate<br>
    <!-- SUMMARY_TABLE_INFO { description => "Integer Byte/Short Compare And Set Predicate" } -->
</h1>


<!-- The following information is used to generate the text in the opcode table in ../opcodes.htm -->
<!-- SUMMARY_TABLE_INFO { section => "Video Instructions" } -->
<!-- SUMMARY_TABLE_INFO { opcode => "VSETP", subsection => 2 } -->

<!-- ############################### -->
<!-- # Format                      # -->
<!-- ############################### -->
<h2>Format</h2>
<div class="Format">

<pre>
SPA 5.0:
<code>        <code>{@{!}Pg}</code>   <code><b>VSETP</b>.cmp{.safmt.sbfmt}</code>       <code>Pu,     Ra{.partselA}, Rb{.partselB}</code>          <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "VSETP" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>VSETP</b>.cmp{.safmt.sbfmt}.bop</code>   <code>Pu, Pv, Ra{.partselA}, Rb{.partselB}, {!}Pp</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "VSETP" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>VSETP</b>.cmp{.safmt.ifmt}</code>        <code>Pu,     Ra{.partselA}, #imm16</code>                 <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "VSETP" } -->
<code>        <code>{@{!}Pg}</code>   <code><b>VSETP</b>.cmp{.safmt.ifmt}.bop</code>    <code>Pu, Pv, Ra{.partselA}, #imm16,        {!}Pp</code>   <code><!-- OPEX_COUNT_2 --><!-- BEGIN &opex("MATH") -->{&amp;req_6}</code>   <code>{?sched}<!-- END &opex("MATH") --></code>   <code>;</code>   </code><!-- SUMMARY_TABLE_INFO { define_opcode => "VSETP" } -->


 .cmp:        { <b>.F, .LT, .EQ, .LE, .GT, .NE, .GE, .T </b>}   Unsigned and signed comparisons

 .safmt:      { <b>.U32, .S32*, .U16, .S16, .U8, .S8</b>} 
 .sbfmt:      { <b>.U32, .S32*, .U16, .S16, .U8, .S8</b>} 
 .ifmt:       {              <b>.U16, .S16*</b>         }
              Source formats

 .bop:        { <b>.AND, .OR, .XOR</b> } 

 .partselA:   if (.U8|.S8)   { <b>.B0*, .B1, .B2, .B3</b>} 
              if (.U16|.S16) { <b>.H0*, .H1</b>}

 .partselB:   if (.U8|.S8)   { <b>.B0*, .B1, .B2, .B3</b>} 
              if (.U16|.S16) { <b>.H0*, .H1</b>}

</pre>

</div>

<!-- ############################### -->
<!-- # Description                 # -->
<!-- ############################### -->
<h2>Description</h2>
<div class="Description">

<p>
<b>VSETP</b>.cmp.bop compares register Ra.partselA and source operand Rb.partselB or #imm16 with comparison 
operation .cmp, combines the Boolean comparison result with predicate operand {!}Pp using Boolean 
operation .bop, and sets two predicate registers Pu and Pv to Boolean values based on the comparison.  
The Boolean operation .bop may be <b>.AND, .OR</b>, or <b>.XOR</b>, corresponding to C Boolean operations <b>&amp;, |</b>, and <b>^</b>.</p>
<pre>
    Pu =  (Ra .cmp Sb) .bop {!}Pp;     
    Pv = !(Ra .cmp Sb) .bop {!}Pp; 
</pre>

<p>
Use .bop {!}Pp for nested predication, with an inner comparison of Ra vs. Sb, conditioned on outer predicate Pp.</p>

<p>
The simple instruction format without .bop {!}Pp assembles as <b>.AND
PT</b>, and Pv is PT, with the following effective operation:</p>
<pre>
    Pu =  (Ra .cmp Rb);         // Set predicate to 1 if comparison is true, else to 0
 or Pu =  (Ra .cmp #imm16);     // Set predicate to 1 if comparison is true, else to 0
</pre>

<p>
The result of a comparison test .cmp is a Boolean true/false value.  </p>

<h4>Basic math operation:</h4>
<p>
The boolean result of the comparison is then operated by boolean operator .bop along with the predicate Pp.</p>

<h4>Sign and saturation:</h4>
<p>
There is no output sign rule (output is boolean); no saturation.</p>

<h4>Second stage operation:</h4>
<p>
There is no second stage operation (unlike the other V* instructions that do byte/short 
extraction.</p>

</div>

<!-- ############################### -->
<!-- # Examples                    # -->
<!-- ############################### -->
<h2>Examples:</h2>
<div class="Examples">


<pre>
<b>VSETP</b>.GT.U32.U16    P1,     R1, 255;
<b>VSETP</b>.NE.U32.S32.OR P1, P4, R1, R2, !P3;
</pre>
</div>

<!-- ############################### -->
<!-- # Tail                        # -->
<!-- ############################### -->
<div class="Tail">
<p><a href="../opcodes.htm">Back to Index of Instructions</a></p>
</div>
</body>
</html>
